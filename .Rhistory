ggplot(mapping = aes(x = dimension1, y = dimension2, label = item)) +
geom_point() +
geom_text()
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item)) +
geom_point() +
geom_text(nudge_y = 0.025, check_overlap = TRUE)
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item)) +
geom_point() +
geom_text(nudge_y = 0.025)
names(bfi25)
bfi.dictionary
cmdscale.data2 <- tibble(item = rownames(cmdscale.fit2$points),
dimension1 = cmdscale.fit2$points[, 1],
dimension2 = cmdscale.fit2$points[, 2],
factor = ifelse(str_detect(item, pattern = "A"), "Agreeableness",
ifelse(str_detect(item, pattern = "C"), "Conscientiousness",
ifelse(str_detect(item, pattern = "E"), "Extraversion",
ifelse(str_detect(item, pattern = "N"), "Emotional Stability",
ifelse(str_detect(item, pattern = "O"), "Openness", NA))))))
cmdscale.data2 <- tibble(item = rownames(cmdscale.fit2$points),
dimension1 = cmdscale.fit2$points[, 1],
dimension2 = cmdscale.fit2$points[, 2],
trait = ifelse(str_detect(item, pattern = "A"), "Agreeableness",
ifelse(str_detect(item, pattern = "C"), "Conscientiousness",
ifelse(str_detect(item, pattern = "E"), "Extraversion",
ifelse(str_detect(item, pattern = "N"), "Emotional Stability",
ifelse(str_detect(item, pattern = "O"), "Openness", NA))))))
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item, color = trait)) +
geom_point() +
geom_text(nudge_y = 0.025) +
theme(legend.position = "top")
library(MASS)
help(isoMDS)
# non-metric part
isoMDS(cmdscale.fit2)
# non-metric part
isoMDS(cmdscale.fit2$points)
# give it distance values and number of dimensions
# also ask for the function to output eigenvalues
isoMDS(bfi.d, k = 2, maxit = 100)
# give it distance values and number of dimensions
# also ask for the function to output eigenvalues
isoMDS.fit1 <- isoMDS(bfi.d, k = 2, maxit = 100)
isoMDS.data1 <- tibble(item = rownames(isoMDS.fit1$points),
dimension1 = isoMDS.fit1$points[, 1],
dimension2 = isoMDS.fit1$points[, 2],
trait = ifelse(str_detect(item, pattern = "A"), "Agreeableness",
ifelse(str_detect(item, pattern = "C"), "Conscientiousness",
ifelse(str_detect(item, pattern = "E"), "Extraversion",
ifelse(str_detect(item, pattern = "N"), "Emotional Stability",
ifelse(str_detect(item, pattern = "O"), "Openness", NA))))))
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item, color = trait)) +
geom_point() +
geom_text(nudge_y = 0.025) +
theme(legend.position = "top")
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item, color = trait)) +
geom_point() +
geom_text(nudge_x = 0.025) +
theme(legend.position = "top")
help(corFiml)
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item, color = trait)) +
geom_point() +
geom_text(nudge_x = 0.025) +
theme(legend.position = "top")
isoMDS.data1 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item, color = trait)) +
geom_point() +
geom_text(nudge_x = 0.025) +
theme(legend.position = "top")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
isoMDS.data1 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item, color = trait)) +
geom_point() +
geom_text(nudge_x = 0.025) +
theme(legend.position = "top")
bfi.dictionary
bfi.dictionary %>%
select(Item, Big6) %>%
kable()
bfi.dictionary %>%
slice(-c(gender, education, age))
bfi.dictionary %>%
slice((ncol(.) - 3):ncol(.)) %>%
select(Item, Big6) %>%
kable()
bfi.dictionary %>%
select(Item, Big6) %>%
kable()
bfi.dictionary %>%
slice(-c(26, 27, 28)) %>%
select(Item, Big6) %>%
kable()
bfi.dictionary %>%
slice(-c(26, 27, 28)) %>%
select(Item, Big6, Keying) %>%
kable()
blogdown:::serve_site()
?kable
blogdown:::serve_site()
# Chunk 1
# install.packages("tidyverse")
# install.packages("knitr")
# install.packages("maps")
# install.packages("psych")
# install.packages("MASS")
library(tidyverse)
library(knitr)
library(maps)
library(psych)
library(MASS)
# use select from dplyr
select <- dplyr::select
# Chunk 2
UScitiesD %>%
as.matrix() %>%
kable()
# Chunk 3
UScitiesD %>%
as.matrix() %>%
as.data.frame() %>%
mutate(city1 = rownames(.)) %>%
gather(key = city2, value = distance, -city1) %>%
ggplot(mapping = aes(x = city1, y = city2, fill = distance, label = distance)) +
geom_tile() +
geom_text() +
scale_fill_gradient2() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Chunk 4
# give it distance values and number of dimensions
# also ask for the function to output eigenvalues
cmdscale.fit1 <- cmdscale(UScitiesD, k = 2, eig = TRUE)
# Chunk 5
tibble(index = 1:length(cmdscale.fit1$eig),
eigenvalue = cmdscale.fit1$eig) %>%
ggplot(mapping = aes(x = index, y = eigenvalue)) +
geom_line() +
geom_point() +
scale_y_continuous(labels = scales::comma)
# Chunk 6
cmdscale.data <- tibble(city = rownames(cmdscale.fit1$points),
dimension1 = cmdscale.fit1$points[, 1],
dimension2 = cmdscale.fit1$points[, 2])
# Chunk 7
cmdscale.data %>%
ggplot(mapping = aes(x = -dimension1, y = -dimension2, label = city)) +
geom_point() +
geom_label(nudge_y = 100)
# Chunk 8
map_data("state") %>%
ggplot(mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
# Chunk 9
bfi.dictionary %>%
slice(-c(26, 27, 28)) %>%
select(Item, Big6, Keying) %>%
kable()
# Chunk 10
bfi %>%
select(A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5) %>%
cor(use = "pairwise.complete.obs") %>%
round(2) %>%
as.data.frame() %>%
mutate(item1 = rownames(.)) %>%
gather(key = item2, value = r, -item1) %>%
ggplot(mapping = aes(x = item1, y = item2, fill = r, label = r)) +
geom_tile() +
geom_text() +
scale_fill_gradient2() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Chunk 11
bfi %>%
select(A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5) %>%
gather(key = variable, value = response) %>%
ggplot(mapping = aes(x = response)) +
geom_histogram(binwidth = 1, color = "white") +
facet_wrap(facets = ~ variable)
# Chunk 12
bfi %>%
select(A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5) %>%
fa.parallel(fm = "minres", fa = "both")
# Chunk 13
bfi25 <- bfi %>%
select(A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5)
# Chunk 14
principal(bfi25, nfactors = 5, rotate = "varimax") %>%
print(sort = TRUE)
# plot
principal(bfi25, nfactors = 5, rotate = "varimax") %>%
fa.diagram(sort = TRUE, errors = TRUE)
# Chunk 15
fa(bfi25, nfactors = 5, rotate = "oblimin", fm = "minres") %>%
print(sort = TRUE)
# plot
fa(bfi25, nfactors = 5, rotate = "oblimin", fm = "minres") %>%
fa.diagram(sort = TRUE, errors = TRUE)
# Chunk 16
# fit principal componenets analysis
principal.fit1 <- principal(bfi25, nfactors = 5, rotate = "varimax")
# fit factor analysis
fa.fit1 <- fa(bfi25, nfactors = 5, rotate = "oblimin", fm = "minres")
# Chunk 17
factor.congruence(list(principal.fit1, fa.fit1)) %>%
as.data.frame() %>%
mutate(factor1 = rownames(.)) %>%
gather(key = factor2, value = r, -factor1) %>%
ggplot(mapping = aes(x = factor1, y = factor2, fill = r, label = r)) +
geom_tile() +
geom_text() +
scale_fill_gradient2()
# Chunk 18
# save correlation matrix
r <- corFiml(bfi25)
# convert to distance matrix
bfi.d <- sqrt(2 * (1 - r))
# Chunk 19
# give it distance values and number of dimensions
# also ask for the function to output eigenvalues
isoMDS.fit1 <- isoMDS(bfi.d, k = 2, maxit = 100)
# Chunk 20
isoMDS.data1 <- tibble(item = rownames(isoMDS.fit1$points),
dimension1 = isoMDS.fit1$points[, 1],
dimension2 = isoMDS.fit1$points[, 2],
trait = ifelse(str_detect(item, pattern = "A"), "Agreeableness",
ifelse(str_detect(item, pattern = "C"), "Conscientiousness",
ifelse(str_detect(item, pattern = "E"), "Extraversion",
ifelse(str_detect(item, pattern = "N"), "Emotional Stability",
ifelse(str_detect(item, pattern = "O"), "Openness", NA))))))
# Chunk 21
isoMDS.data1 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item, color = trait)) +
geom_point() +
geom_text(nudge_x = 0.025) +
theme(legend.position = "top")
?isoMDS
Shepard(bfi.d, isoMDS.data1$points)
Shepard(bfi.d, isoMDS.fit1$points)
Shepard(as.dist(bfi.d), isoMDS.fit1$points)
plot(Shepard(as.dist(bfi.d), isoMDS.fit1$points))
plot(Shepard(as.dist(bfi.d), isoMDS.fit1$points)); lines(Shepard(as.dist(bfi.d), isoMDS.fit1$points)$x, Shepard(as.dist(bfi.d), isoMDS.fit1$points)$yf, type = "S")
?Shepard
swiss
dist(r)
as.dist(bfi25)
?as.dist
dist(r, method = "minkowski")
dist(r, method = "euclidean")
dist(d, method = "euclidean")
dist(bfi.d, method = "euclidean")
swiss.x <- as.matrix(swiss[, -1])
swiss.dist <- dist(swiss.x)
swiss.dist
# shepard
Shepard(as.dist(bfi.d), isoMDS.fit1$points)
# shepard
Shepard.fit1 <- Shepard(as.dist(bfi.d), isoMDS.fit1$points)
Shepard.fit1$x
Shepard.fit1$y
Shepard.fit1$yf
# data
shepard.data1 <- tibble(x = Shepard.fit1$x, y = Shepard.fit1$y, fit = Shepard.fit1$yf)
# plot
shepard.data1 %>%
ggplot(mapping = aes(x = x, y = y)) +
geom_point() +
geom_line(mapping = aes(x = x, y = fit))
# plot
shepard.data1 %>%
ggplot(mapping = aes(x = x, y = y)) +
geom_point(alpha = 0.25) +
geom_line(mapping = aes(x = x, y = fit))
# plot
shepard.data1 %>%
ggplot(mapping = aes(x = x, y = y)) +
geom_point(alpha = 0.5) +
geom_line(mapping = aes(x = x, y = fit))
tibble(x = 1:10, y = x + sample(1:10, size = 10, replace = TRUE))
tibble(x = 1:10, y = x + sample(1:10, size = 10, replace = TRUE)) %>%
ggplot(mapping = aes(x = x, y = y)) +
geom_point() +
geom_line()
tibble(x = 1:10, y = x^2) %>%
ggplot(mapping = aes(x = x, y = y)) +
geom_point() +
geom_line()
tibble(x = 1:10, y = x + 1:10) %>%
ggplot(mapping = aes(x = x, y = y)) +
geom_point() +
geom_line()
tibble(x = 1:10, y = x + seq(from = 1, to = 20, length.out = 10)) %>%
ggplot(mapping = aes(x = x, y = y)) +
geom_point() +
geom_line()
seq(from = 1, to = 20, length.out = 10)
tibble(x = 1:5, y = x + c(1, 2, 5, 8, 20)) %>%
ggplot(mapping = aes(x = x, y = y)) +
geom_point() +
geom_line()
# plot
shepard.data1 %>%
ggplot(mapping = aes(x = x, y = y)) +
geom_point(alpha = 0.5) +
geom_line(mapping = aes(x = x, y = fit))
blogdown:::serve_site()
blogdown:::serve_site()
# Chunk 1
# install.packages("tidyverse")
# install.packages("knitr")
# install.packages("lavaan")
# install.packages("psych")
# install.packages("MBESS")
library(tidyverse)
library(knitr)
library(lavaan)
library(psych)
library(MBESS)
# Chunk 2
thirst_dat <- read_csv("data/mackinnon_2008_t10.1.csv")
gender <- c("female", "male")
gender
gender <- factor(gender)
gender
contrasts(gender)
cbind(female = c(-1, 1))
contrasts(gender)
contrasts(gender) <- cbind(female = c(-1, 1))
contrasts(gender)
contrasts(gender) <- cbind(male = c(-1, 1))
contrasts(gender)
file.choose()
thirst.dat <- read_csv("/Users/nicholasmichalak/nickmichalak/content/post/2019-02-13-testing-indirect-effects-mediation-in-r/data/mackinnon_2008_t10.1.csv")
# Chunk 1
# install.packages("tidyverse")
# install.packages("knitr")
# install.packages("lavaan")
# install.packages("psych")
# install.packages("MBESS")
library(tidyverse)
library(knitr)
library(lavaan)
library(psych)
library(MBESS)
thirst.dat <- read_csv("/Users/nicholasmichalak/nickmichalak/content/post/2019-02-13-testing-indirect-effects-mediation-in-r/data/mackinnon_2008_t10.1.csv")
thirst.dat
thirst.dat %>%
select(room_temp, thirst, consume) %>%
pairs.panels(scale = FALSE, pch = ".")
mod1 <- "# a path
thirst ~ a * room_temp
# b path
consume ~ b * thirst
# c prime path
consume ~ cp * room_temp
# indirect and total effects
ab := a * b
total := cp + ab"
# Chunk 1
# install.packages("tidyverse")
# install.packages("knitr")
# install.packages("lavaan")
# install.packages("psych")
# install.packages("MBESS")
library(tidyverse)
library(knitr)
library(lavaan)
library(psych)
library(MBESS)
# Chunk 2
thirst.dat <- read_csv("data/mackinnon_2008_t10.1.csv")
# Chunk 3
thirst.dat %>%
headTail() %>%
kable()
# Chunk 4
thirst.dat %>%
select(room_temp, thirst, consume) %>%
pairs.panels(scale = FALSE, pch = ".")
# Chunk 5
mod1 <- "# a path
thirst ~ a * room_temp
# b path
consume ~ b * thirst
# c prime path
consume ~ cp * room_temp
# indirect and total effects
ab := a * b
total := cp + ab"
# Chunk 6
set.seed(1234)
# Chunk 7
sem.fit1 <- sem(mod1, data = thirst.dat, se = "bootstrap", bootstrap = 10000)
# Chunk 8
summary(sem.fit1, standardized = TRUE)
# Chunk 9
parameterestimates(sem.fit1, boot.ci.type = "bca.simple", standardized = TRUE) %>%
kable()
sem.fit1@ParTable
blogdown:::serve_site()
sem.fit1@ParTable$est[sem.fit1@ParTable$label == "a"]
blogdown:::serve_site()
round(sem.fit1@ParTable$est[sem.fit1@ParTable$label == "a"], 2)
round(sem.fit1@ParTable$est[sem.fit1@ParTable$label == "a"], 2)
blogdown:::serve_site()
# Chunk 1
# install.packages("tidyverse")
# install.packages("knitr")
# install.packages("lavaan")
# install.packages("psych")
library(tidyverse)
library(knitr)
library(lavaan)
library(psych)
# Chunk 2
thirst.normal <- read_csv("data/mackinnon_2008_t3.1.csv")
thirst.fit <- read_csv("data/mackinnon_2008_t10.1.csv")
file.choose()
file.choose()
thirst.normal <- read_csv("/Users/nicholasmichalak/nickmichalak/content/post/2019-02-14-testing-conditional-indirect-effects-mediation-in-r/data/mackinnon_2008_t3.1.csv")
thirst.fit <- read_csv("/Users/nicholasmichalak/nickmichalak/content/post/2019-02-14-testing-conditional-indirect-effects-mediation-in-r/data/mackinnon_2008_t10.1.csv")
thirst.fit$id <- 51:100
thirst.normal$phys_fit <- -0.5
thirst.fit$phys_fit <- 0.5
thirst.data <- bind_rows(thirst.normal, thirst.fit)
thirst.data <- thirst.data %>%
mutate(id = factor(id),
room_temp_c = room_temp - mean(room_temp),
thirst_c = thirst - mean(thirst))
thirst.data <- thirst.data %>%
mutate(tmp_fit = room_temp_c * phys_fit,
thrst_fit = thirst_c * phys_fit)
thirst.data %>%
headTail() %>%
kable()
thirst.data %>%
write_csv(path = "data/thirst.data.csv")
thirst.data %>%
select(room_temp, room_temp_c, thirst, thirst_c, consume, phys_fit, tmp_fit, thrst_fit) %>%
pairs.panels(scale = FALSE, pch = ".")
mod1 <- "# a path
thirst_c ~ a1 * room_temp_c
thirst_c ~ a2 * phys_fit
thirst_c ~ a3 * tmp_fit
# b paths
consume ~ b1 * thirst_c
# c prime path
consume ~ cp * room_temp_c
# index of moderated mediation and conditional indirect effects
b1a3 := b1 * a3
normss := a1 + a3 * -0.5
fitss := a1 + a3 * 0.5
norm := a1 * b1 + b1a3 * -0.5
fit := a1 * b1 + b1a3 * 0.5"
sem.fit1 <- sem(mod1, data = thirst.data, se = "bootstrap", bootstrap = 10000)
`r round(sem.fit1@ParTable$est[sem.fit1@ParTable$label == "a2"], 2)`
round(sem.fit1@ParTable$est[sem.fit1@ParTable$label == "a2"], 2)
sem.fit1@ParTable
parameterestimates(sem.fit1, boot.ci.type = "bca.simple", standardized = TRUE)
parameterestimates(sem.fit1, boot.ci.type = "bca.simple", standardized = TRUE) %>% filter(label == "a1b3")
parameterestimates(sem.fit1, boot.ci.type = "bca.simple", standardized = TRUE) %>% filter(label == "b1a3")
parameterestimates(sem.fit1, boot.ci.type = "bca.simple", standardized = TRUE) %>% filter(label == "b1a3") %>% select(ci.lower, ci.upper)
parameterestimates(sem.fit1, boot.ci.type = "bca.simple", standardized = TRUE) %>% filter(label == "b1a3") %>% select(ci.lower, ci.upper) %>% pull()
blogdown:::serve_site()
View(thirst.data)
sem.fit2 <- sem(mod2, data = thirst.data, se = "bootstrap", bootstrap = 10000)
mod2 <- "# a path
thirst_c ~ a1 * room_temp_c
# b paths
consume ~ b1 * thirst_c
consume ~ b2 * phys_fit
consume ~ b3 * thrst_fit
# c prime path
consume ~ cp * room_temp_c
# index of moderated mediation and conditional indirect effects
a1b3 := a1 * b3
normie := a1 * b1 + a1b3 * -0.5
fitie := a1 * b1 + a1b3 * 0.5"
sem.fit2 <- sem(mod2, data = thirst.data, se = "bootstrap", bootstrap = 10000)
round(sem.fit2@ParTable$est[sem.fit2@ParTable$label == "a1"], 2)
sem.fit1@ParTable
sem.fit1@boot
sem.fit1@ParTable
parameterestimates(sem.fit1, boot.ci.type = "bca.simple", standardized = TRUE)
parameterestimates(sem.fit1, boot.ci.type = "bca.simple", standardized = TRUE)[14, 9:10]
as.numeric(parameterestimates(sem.fit1, boot.ci.type = "bca.simple", standardized = TRUE)[14, 9:10])
cat(as.numeric(parameterestimates(sem.fit1, boot.ci.type = "bca.simple", standardized = TRUE)[14, 9:10]), sep = ", ")
cat(round(as.numeric(parameterestimates(sem.fit1, boot.ci.type = "bca.simple", standardized = TRUE)[14, 9:10]), 3), sep = ", ")
sem.fit2 <- sem(mod2, data = thirst.data, se = "bootstrap", bootstrap = 10000)
parameterestimates(sem.fit2, boot.ci.type = "bca.simple", standardized = TRUE)
thirst.dat <- thirst.fit
mod1 <- "# a path
thirst ~ a * room_temp
# b path
consume ~ b * thirst
# c prime path
consume ~ cp * room_temp
# indirect and total effects
ab := a * b
total := cp + ab"
sem.fit1 <- sem(mod1, data = thirst.dat, se = "bootstrap", bootstrap = 10000)
parameterestimates(sem.fit1, boot.ci.type = "bca.simple", standardized = TRUE) %>%
kable()
parameterestimates(sem.fit1, boot.ci.type = "bca.simple", standardized = TRUE)
blogdown:::serve_site()
.
