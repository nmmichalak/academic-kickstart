factor.fit(cor(bfi25), principal.fit1$loadings)
factor.fit(cor(bfi25, use = "pairwise.obs.complete"), principal.fit1$loadings)
factor.fit(cor(bfi25, use = "pairwise.obs.complete"), principal.fit1$loadings)
cor(bfi25, use = "pairwise.obs.complete")
?cor
factor.fit(cor(bfi25, use = "pairwise.complete.obs"), principal.fit1$loadings)
factor.fit(cor(bfi25, use = "pairwise.complete.obs"), fa.fit1$loadings)
factor.congruence(list(principal.fit1, fa.fit1)) %>%
as.data.frame() %>%
mutate(factor1 = rownames(.)) %>%
gather(key = factor2, value = r, -factor1) %>%
ggplot(mapping = aes(x = factor1, y = factor2, fill = r, label = r)) +
geom_tile() +
geom_text() +
scale_fill_gradient2()
principal.fit1
# correlation matrix
r <- cor(bfi25, use = "pairwise.complete.obs")
# PCA w/varimax rotation
factor.congruence(r, principal.fit1$loadings)
# FA w/oblimin rotation
factor.congruence(r, fa.fit1$loadings)
# correlation matrix
r <- cor(bfi25, use = "pairwise.complete.obs")
# PCA w/varimax rotation
factor.congruence(r, principal.fit1$loadings)
# FA w/oblimin rotation
factor.congruence(r, fa.fit1$loadings)
# correlation matrix
r <- cor(bfi25, use = "pairwise.complete.obs")
# PCA w/varimax rotation
factor.fit(r, principal.fit1$loadings)
# FA w/oblimin rotation
factor.fit(r, fa.fit1$loadings)
# PCA w/varimax rotation
factor.stats(r, principal.fit1$loadings)
# FA w/oblimin rotation
factor.stats(r, fa.fit1$loadings)
corr.test(bfi25)
# PCA w/varimax rotation
factor.stats(r, principal.fit1$loadings, n.obs = 2700)
# FA w/oblimin rotation
factor.stats(r, fa.fit1$loadings, n.obs = 2700)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
factor.congruence(list(principal.fit1, fa.fit1)) %>%
as.data.frame() %>%
mutate(factor1 = rownames(.)) %>%
gather(key = factor2, value = r, -factor1) %>%
ggplot(mapping = aes(x = factor1, y = factor2, fill = r, label = r)) +
geom_tile() +
geom_text() +
scale_fill_gradient2()
principal(bfi25, nfactors = 5, rotate = "varimax") %>%
print(sort = TRUE)
fa(bfi25, nfactors = 5, rotate = "oblimin", fm = "minres") %>%
print(sort = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
# Chunk 1
# install.packages("tidyverse")
# install.packages("knitr")
# install.packages("haven")
# install.packages("maps")
# install.packages("psych")
library(tidyverse)
library(knitr)
library(haven)
library(maps)
library(psych)
# use select from dplyr
select <- dplyr::select
# Chunk 2
UScitiesD %>%
as.matrix() %>%
kable()
# Chunk 3
UScitiesD %>%
as.matrix() %>%
as.data.frame() %>%
mutate(city1 = rownames(.)) %>%
gather(key = city2, value = distance, -city1) %>%
ggplot(mapping = aes(x = city1, y = city2, fill = distance, label = distance)) +
geom_tile() +
geom_text() +
scale_fill_gradient2() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Chunk 4
# give it distance values and number of dimensions
# also ask for the function to output eigenvalues
cmdscale.fit1 <- cmdscale(UScitiesD, k = 2, eig = TRUE)
# Chunk 5
tibble(index = 1:length(cmdscale.fit1$eig),
eigenvalue = cmdscale.fit1$eig) %>%
ggplot(mapping = aes(x = index, y = eigenvalue)) +
geom_line() +
geom_point() +
scale_y_continuous(labels = scales::comma)
# Chunk 6
cmdscale.data <- tibble(city = rownames(cmdscale.fit1$points),
dimension1 = cmdscale.fit1$points[, 1],
dimension2 = cmdscale.fit1$points[, 2])
# Chunk 7
cmdscale.data %>%
ggplot(mapping = aes(x = -dimension1, y = -dimension2, label = city)) +
geom_point() +
geom_label(nudge_y = 100)
# Chunk 8
map_data("state") %>%
ggplot(mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
# Chunk 9
bfi %>%
select(A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5) %>%
cor(use = "pairwise.complete.obs") %>%
round(2) %>%
as.data.frame() %>%
mutate(item1 = rownames(.)) %>%
gather(key = item2, value = r, -item1) %>%
ggplot(mapping = aes(x = item1, y = item2, fill = r, label = r)) +
geom_tile() +
geom_text() +
scale_fill_gradient2() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Chunk 10
bfi %>%
select(A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5) %>%
gather(key = variable, value = response) %>%
ggplot(mapping = aes(x = response)) +
geom_histogram(binwidth = 1, color = "white") +
facet_wrap(facets = ~ variable)
# Chunk 11
bfi %>%
select(A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5) %>%
fa.parallel(fm = "minres", fa = "both")
# Chunk 12
bfi25 <- bfi %>%
select(A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5)
# Chunk 13
principal(bfi25, nfactors = 5, rotate = "varimax") %>%
print(sort = TRUE)
# plot
principal(bfi25, nfactors = 5, rotate = "varimax") %>%
fa.diagram(sort = TRUE, errors = TRUE)
# Chunk 14
fa(bfi25, nfactors = 5, rotate = "oblimin", fm = "minres") %>%
print(sort = TRUE)
# plot
fa(bfi25, nfactors = 5, rotate = "oblimin", fm = "minres") %>%
fa.diagram(sort = TRUE, errors = TRUE)
# Chunk 15
# fit principal componenets analysis
principal.fit1 <- principal(bfi25, nfactors = 5, rotate = "varimax")
# fit factor analysis
fa.fit1 <- fa(bfi25, nfactors = 5, rotate = "oblimin", fm = "minres")
# Chunk 16
factor.congruence(list(principal.fit1, fa.fit1)) %>%
as.data.frame() %>%
mutate(factor1 = rownames(.)) %>%
gather(key = factor2, value = r, -factor1) %>%
ggplot(mapping = aes(x = factor1, y = factor2, fill = r, label = r)) +
geom_tile() +
geom_text() +
scale_fill_gradient2()
bfi %>%
select(A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5) %>%
fa.parallel(fm = "minres", fa = "both")
fa.fit1$scores
bfi25
reverse.code()
?reverse.code()
?score.items()
make.keys(bfi,keys.list)
paste0(colnames(bfi25), sep = " + ")
paste(colnames(bfi25), sep = " + ")
paste(colnames(bfi25), collapse = " + ")
bfi25 <- bfi25 %>%
mutate(agreeableness = (-A1 + A2 + A3 + A4 + A5) / 5,
conscientiousness = (C1 + C2 + C3 + -C4 + -C5) / 5,
extraversion = (-E1 + -E2 + E3 + E4 + E5) / 5,
neuroticism = (N1 + N2 + N3 + N4 + N5) / 5,
openness = (O1 + -O2 + O3 + O4 + -O5) / 5)
View(bfi25)
colnames(bfi25)
colnames(bfi25)[26:30]
colnames(bfi25)[26:30] %>% cat(sep = ", ")
bfi25.means <- bfi25 %>%
gather(key = trait, value = response, agreeableness, conscientiousness, extraversion, neuroticism, openness) %>%
group_by(trait) %>%
summarise(response.mean = mean(response, na.rm = TRUE))
bfi25.means
bfi25 %>%
gather(key = trait, value = response, agreeableness, conscientiousness, extraversion, neuroticism, openness)
colnames(bfi25)[-26:(-30)] %>% cat(sep = ", ")
bfi25.means <- bfi25 %>%
gather(key = item, value = response, A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5) %>%
group_by(item) %>%
summarise(response.mean = mean(response, na.rm = TRUE))
bfi25.means
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
# Chunk 1
# install.packages("tidyverse")
# install.packages("knitr")
# install.packages("haven")
# install.packages("maps")
# install.packages("psych")
library(tidyverse)
library(knitr)
library(haven)
library(maps)
library(psych)
# use select from dplyr
select <- dplyr::select
# Chunk 2
UScitiesD %>%
as.matrix() %>%
kable()
# Chunk 3
UScitiesD %>%
as.matrix() %>%
as.data.frame() %>%
mutate(city1 = rownames(.)) %>%
gather(key = city2, value = distance, -city1) %>%
ggplot(mapping = aes(x = city1, y = city2, fill = distance, label = distance)) +
geom_tile() +
geom_text() +
scale_fill_gradient2() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Chunk 4
# give it distance values and number of dimensions
# also ask for the function to output eigenvalues
cmdscale.fit1 <- cmdscale(UScitiesD, k = 2, eig = TRUE)
# Chunk 5
tibble(index = 1:length(cmdscale.fit1$eig),
eigenvalue = cmdscale.fit1$eig) %>%
ggplot(mapping = aes(x = index, y = eigenvalue)) +
geom_line() +
geom_point() +
scale_y_continuous(labels = scales::comma)
# Chunk 6
cmdscale.data <- tibble(city = rownames(cmdscale.fit1$points),
dimension1 = cmdscale.fit1$points[, 1],
dimension2 = cmdscale.fit1$points[, 2])
# Chunk 7
cmdscale.data %>%
ggplot(mapping = aes(x = -dimension1, y = -dimension2, label = city)) +
geom_point() +
geom_label(nudge_y = 100)
# Chunk 8
map_data("state") %>%
ggplot(mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
# Chunk 9
bfi %>%
select(A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5) %>%
cor(use = "pairwise.complete.obs") %>%
round(2) %>%
as.data.frame() %>%
mutate(item1 = rownames(.)) %>%
gather(key = item2, value = r, -item1) %>%
ggplot(mapping = aes(x = item1, y = item2, fill = r, label = r)) +
geom_tile() +
geom_text() +
scale_fill_gradient2() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Chunk 10
bfi %>%
select(A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5) %>%
gather(key = variable, value = response) %>%
ggplot(mapping = aes(x = response)) +
geom_histogram(binwidth = 1, color = "white") +
facet_wrap(facets = ~ variable)
# Chunk 11
bfi %>%
select(A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5) %>%
fa.parallel(fm = "minres", fa = "both")
# Chunk 12
bfi25 <- bfi %>%
select(A1, A2, A3, A4, A5, C1, C2, C3, C4, C5, E1, E2, E3, E4, E5, N1, N2, N3, N4, N5, O1, O2, O3, O4, O5)
# Chunk 13
principal(bfi25, nfactors = 5, rotate = "varimax") %>%
print(sort = TRUE)
# plot
principal(bfi25, nfactors = 5, rotate = "varimax") %>%
fa.diagram(sort = TRUE, errors = TRUE)
# Chunk 14
fa(bfi25, nfactors = 5, rotate = "oblimin", fm = "minres") %>%
print(sort = TRUE)
# plot
fa(bfi25, nfactors = 5, rotate = "oblimin", fm = "minres") %>%
fa.diagram(sort = TRUE, errors = TRUE)
# Chunk 15
# fit principal componenets analysis
principal.fit1 <- principal(bfi25, nfactors = 5, rotate = "varimax")
# fit factor analysis
fa.fit1 <- fa(bfi25, nfactors = 5, rotate = "oblimin", fm = "minres")
# Chunk 16
factor.congruence(list(principal.fit1, fa.fit1)) %>%
as.data.frame() %>%
mutate(factor1 = rownames(.)) %>%
gather(key = factor2, value = r, -factor1) %>%
ggplot(mapping = aes(x = factor1, y = factor2, fill = r, label = r)) +
geom_tile() +
geom_text() +
scale_fill_gradient2()
corr.test.out1 <- corr.test(bfi25, use = "pairwise", method = "pearson")
corr.test.out1$n
median(corr.test.out1$n)
# save median correlation sample size
N <- median(corr.test.out1$n)
?dist
as.dist((1 - r) / 2)
# save correlation matrix
r <- corFiml(bfi25)
x
d <-
1 - r
1 - r
as.dist((1 - r) / 2)
# convert to distance matrix
d <- as.dist((1 - r) / 2)
sqrt(2 * (1 - r))
as.dist(r)
# convert to distance matrix
d <- sqrt(2 * (1 - r))
# convert to distance matrix
d <- as.dist(sqrt(2 * (1 - r)))
d
# convert to distance matrix
d <- dist(sqrt(2 * (1 - r)))
d
# convert to distance matrix
d <- cor2dist(r)
d
sqrt(2 * (1 - r))
sqrt(2 * (1 - r))
cor2dist
cmdscale(d, k = 2)
cmdscale(d, k = 5)
combn(5, 2)
# save correlation matrix
r <- corFiml(bfi25)
# convert to distance matrix
bfi.d <- sqrt(2 * (1 - r))
# give it distance values and number of dimensions
# also ask for the function to output eigenvalues
cmdscale.fit2 <- cmdscale(bfi.d, k = 5, eig = TRUE)
cmdscale.data2 <- tibble(city = rownames(cmdscale.fit2$points),
dimension1 = cmdscale.fit1$points[, 1],
dimension2 = cmdscale.fit1$points[, 2],
dimension3 = cmdscale.fit1$points[, 3],
dimension4 = cmdscale.fit1$points[, 4],
dimension5 = cmdscale.fit1$points[, 5])
cmdscale.data2 <- tibble(city = rownames(cmdscale.fit2$points),
dimension1 = cmdscale.fit1$points[, 1],
dimension2 = cmdscale.fit1$points[, 2],
dimension3 = cmdscale.fit1$points[, 3],
dimension4 = cmdscale.fit1$points[, 4],
dimension5 = cmdscale.fit1$points[, 5])
cmdscale.data2 <- tibble(city = rownames(cmdscale.fit2$points),
dimension1 = cmdscale.fit2$points[, 1],
dimension2 = cmdscale.fit2$points[, 2],
dimension3 = cmdscale.fit2$points[, 3],
dimension4 = cmdscale.fit2$points[, 4],
dimension5 = cmdscale.fit2$points[, 5])
cmdscale.data2 %>%
gather(key = dimension, value = score, dimension1:dimension5)
cmdscale.data2 <- tibble(item = rownames(cmdscale.fit2$points),
dimension1 = cmdscale.fit2$points[, 1],
dimension2 = cmdscale.fit2$points[, 2],
dimension3 = cmdscale.fit2$points[, 3],
dimension4 = cmdscale.fit2$points[, 4],
dimension5 = cmdscale.fit2$points[, 5])
cmdscale.data2
cmdscale.data2 %>%
ggplot(mapping = aes(label = item))
# give it distance values and number of dimensions
# also ask for the function to output eigenvalues
cmdscale.fit2 <- cmdscale(bfi.d, k = 2, eig = TRUE)
cmdscale.data2 <- tibble(item = rownames(cmdscale.fit2$points),
dimension1 = cmdscale.fit2$points[, 1],
dimension2 = cmdscale.fit2$points[, 2])
cmdscale.data %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item)) +
geom_point()
cmdscale.data2 <- tibble(item = rownames(cmdscale.fit2$points),
dimension1 = cmdscale.fit2$points[, 1],
dimension2 = cmdscale.fit2$points[, 2])
cmdscale.data %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item)) +
geom_point()
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item)) +
geom_point()
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item)) +
geom_point() +
geom_text()
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item)) +
geom_point() +
geom_text(nudge_y = 0.025, check_overlap = TRUE)
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item)) +
geom_point() +
geom_text(nudge_y = 0.025)
names(bfi25)
bfi.dictionary
cmdscale.data2 <- tibble(item = rownames(cmdscale.fit2$points),
dimension1 = cmdscale.fit2$points[, 1],
dimension2 = cmdscale.fit2$points[, 2],
factor = ifelse(str_detect(item, pattern = "A"), "Agreeableness",
ifelse(str_detect(item, pattern = "C"), "Conscientiousness",
ifelse(str_detect(item, pattern = "E"), "Extraversion",
ifelse(str_detect(item, pattern = "N"), "Emotional Stability",
ifelse(str_detect(item, pattern = "O"), "Openness", NA))))))
cmdscale.data2 <- tibble(item = rownames(cmdscale.fit2$points),
dimension1 = cmdscale.fit2$points[, 1],
dimension2 = cmdscale.fit2$points[, 2],
trait = ifelse(str_detect(item, pattern = "A"), "Agreeableness",
ifelse(str_detect(item, pattern = "C"), "Conscientiousness",
ifelse(str_detect(item, pattern = "E"), "Extraversion",
ifelse(str_detect(item, pattern = "N"), "Emotional Stability",
ifelse(str_detect(item, pattern = "O"), "Openness", NA))))))
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item, color = trait)) +
geom_point() +
geom_text(nudge_y = 0.025) +
theme(legend.position = "top")
library(MASS)
help(isoMDS)
# non-metric part
isoMDS(cmdscale.fit2)
# non-metric part
isoMDS(cmdscale.fit2$points)
# give it distance values and number of dimensions
# also ask for the function to output eigenvalues
isoMDS(bfi.d, k = 2, maxit = 100)
# give it distance values and number of dimensions
# also ask for the function to output eigenvalues
isoMDS.fit1 <- isoMDS(bfi.d, k = 2, maxit = 100)
isoMDS.data1 <- tibble(item = rownames(isoMDS.fit1$points),
dimension1 = isoMDS.fit1$points[, 1],
dimension2 = isoMDS.fit1$points[, 2],
trait = ifelse(str_detect(item, pattern = "A"), "Agreeableness",
ifelse(str_detect(item, pattern = "C"), "Conscientiousness",
ifelse(str_detect(item, pattern = "E"), "Extraversion",
ifelse(str_detect(item, pattern = "N"), "Emotional Stability",
ifelse(str_detect(item, pattern = "O"), "Openness", NA))))))
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item, color = trait)) +
geom_point() +
geom_text(nudge_y = 0.025) +
theme(legend.position = "top")
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item, color = trait)) +
geom_point() +
geom_text(nudge_x = 0.025) +
theme(legend.position = "top")
help(corFiml)
cmdscale.data2 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item, color = trait)) +
geom_point() +
geom_text(nudge_x = 0.025) +
theme(legend.position = "top")
isoMDS.data1 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item, color = trait)) +
geom_point() +
geom_text(nudge_x = 0.025) +
theme(legend.position = "top")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
isoMDS.data1 %>%
ggplot(mapping = aes(x = dimension1, y = dimension2, label = item, color = trait)) +
geom_point() +
geom_text(nudge_x = 0.025) +
theme(legend.position = "top")
bfi.dictionary
bfi.dictionary %>%
select(Item, Big6) %>%
kable()
bfi.dictionary %>%
slice(-c(gender, education, age))
bfi.dictionary %>%
slice((ncol(.) - 3):ncol(.)) %>%
select(Item, Big6) %>%
kable()
bfi.dictionary %>%
select(Item, Big6) %>%
kable()
bfi.dictionary %>%
slice(-c(26, 27, 28)) %>%
select(Item, Big6) %>%
kable()
bfi.dictionary %>%
slice(-c(26, 27, 28)) %>%
select(Item, Big6, Keying) %>%
kable()
blogdown:::serve_site()
?kable
blogdown:::serve_site()
