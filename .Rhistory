geom_line() +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
labs(x = expression("Probability that Y = 1": pi), y = NULL, title = expression(Logit: log[e](frac(pi, (1 - pi))))) +
post_theme
# Chunk 6
tibble(pihat = seq(0, 1, 0.10),
var_resid = pihat * (1 - pihat)) %>%
ggplot(mapping = aes(x = pihat, y = var_resid)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
labs(x = expression(hat(pi)), y = NULL, title = expression(var(r[i]))) +
post_theme
# Chunk 7
N <- 250
b0 <- 0
b1 <- 1
# Chunk 8
# Set random seed so results can be reproduced
set.seed(533837)
x1 <- rnorm(n = N, mean = 0, sd = 1)
# Chunk 9
# Set random seed so results can be reproduced
set.seed(533837)
# The prob argument asks for the probability of 1 for each replicate, which is a logistic function of the additive, linear equation
y <- rbinom(n = N, size = 1, prob = plogis(b0 + b1 * x1))
# Chunk 10
data1 <- tibble(id = 1:N, y, x1)
data1 %>%
head() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 11
data1 %>%
ggplot(mapping = aes(x = x1, y = y)) +
geom_hline(yintercept = 0, linetype = "dotted") +
geom_hline(yintercept = 1, linetype = "dotted") +
geom_smooth(mapping = aes(color = "Linear"), method = "glm", formula = y ~ x, method.args = list(family = gaussian(link = "identity")), se = FALSE) +
geom_smooth(mapping = aes(color = "Logistic"), method = "glm", formula = y ~ x, method.args = list(family = binomial(link = "logit")), se = FALSE) +
geom_point(size = 3, alpha = 0.50) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(x = expression(x[1]), y = NULL, title = bquote("Prediction:" ~ hat(pi)), color = "Model Form") +
post_theme
# Chunk 12
glm.fit1 <- glm(y ~ x1, family = gaussian(link = "identity"), data = data1)
# Chunk 13
# Save a data frame with residuals and fitted values (pihat)
pihat_residual1 <- tibble(model_form = "Linear",
pihat = glm.fit1$fitted.values,
residual = residuals.glm
(glm.fit1, type = "response"))
# Plot fitted values (pihat) and residuals
pihat_residual1 %>%
mutate(impossible = ifelse(pihat < 0 | pihat > 1, "Impossible Value", "Possible Value")) %>%
ggplot(mapping = aes(x = pihat, y = residual)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dotted") +
geom_vline(xintercept = 1, linetype = "dotted") +
geom_smooth(method = "loess", se = FALSE, span = 0.80, color = "black") +
geom_point(mapping = aes(color = impossible), size = 3, alpha = 0.50) +
scale_x_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#e69f00", "#000000")) +
labs(x = bquote("Prediction:" ~ hat(pi)), y = expression(Residual: y - hat(pi)), color = NULL) +
post_theme
# Chunk 14
summary(glm.fit1)
# Wrapping () around the code below allows me to save and print the results together
(roc.fit1 <- roc(response = glm.fit1$data$y, predictor = glm.fit1$fitted.values, direction = "<", plot = TRUE, ci = TRUE, ci.method = "boot", boot.n = 1000))
# Wrapping () around the code below allows me to save and print the results together
(roc.fit1 <- roc(response = glm.fit1$data$y, predictor = glm.fit1$fitted.values, direction = "<", ci = TRUE, ci.method = "boot", boot.n = 1000))
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificty, y = sensitivity)) +
geom_line()
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_line()
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities, falsepositive = 1 - specificity)
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities, falsepositive = 1 - specificity) %>%
ggplot(mapping = aes(x = falsepositive, y = sensitivity)) +
geom_line()
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities, falsepositive = (1 - specificity) * -1) %>%
ggplot(mapping = aes(x = falsepositive, y = sensitivity)) +
geom_line()
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities, falsepositive = (1 - specificity) * -1) %>%
ggplot(mapping = aes(x = falsepositive, y = sensitivity)) +
geom_line() +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities, falsepositive = (1 - specificity) * -1) %>%
ggplot(mapping = aes(x = falsepositive, y = sensitivity)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities, falsepositive = 1 - specificity) %>%
ggplot(mapping = aes(x = falsepositive, y = sensitivity)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_line() +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_line() +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed")
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
geom_line() +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_abline(intercept = 0, slope = 0.10, linetype = "dashed") +
geom_line() +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_abline(intercept = 1, slope = 0.10, linetype = "dashed") +
geom_line() +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_abline(intercept = 1, slope = 0.20, linetype = "dashed") +
geom_line() +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_abline(intercept = 0, slope = 0.10, linetype = "dashed") +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
geom_line() +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_abline(intercept = 1, slope = 1, linetype = "dashed") +
geom_line() +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_abline(intercept = 1, slope = 1, linetype = "dashed") +
geom_line() +
geom_area(alpha = 0.50) +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
labs(x = "Specificity (100% - False Positive Rate)", y = "Sensitivity (True Positive Rate)") +
post_theme
tibble(true.positive = roc.fit1$sensitivities,
specificity = roc.fit1$specificities,
false.positive = 1 - specificity) %>%
ggplot(mapping = aes(x = false.positive, y = true.positive)) +
geom_line(color = "#d55e00") +
geom_area(alpha = 0.25, fill = "#d55e00", position = "identity") +
geom_segment(aes(x = 1, xend = 0, y = 1, yend = 0), color = "black", linetype = "dashed") +
annotate(x = 0.75, y = 0.25, geom = "text", label = with(data = bind_rows(round(ci(roc.fit1, method = "bootstrap")[1:3], 3)), paste0("AUROC\n", `50%`, " [", `2.5%`, ", ", `97.5%`, "]")), fontface = "bold") +
labs(x = "False Positive Rate (1 - Specificity)", y = "True Positive Rate (Sensitvity)", title = "Pilot Study")
tibble(true.positive = roc.fit1$sensitivities,
specificity = roc.fit1$specificities,
false.positive = 1 - specificity) %>%
ggplot(mapping = aes(x = false.positive, y = true.positive)) +
geom_line(color = "#d55e00") +
geom_area(alpha = 0.25, fill = "#d55e00", position = "identity")
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_abline(intercept = 1, slope = 1, linetype = "dashed") +
geom_line() +
geom_area(alpha = 0.25, stat = "identity") +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
labs(x = "Specificity (100% - False Positive Rate)", y = "Sensitivity (True Positive Rate)") +
post_theme
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities) %>%
ggplot(mapping = aes(x = specificity, y = sensitivity)) +
geom_abline(intercept = 1, slope = 1, linetype = "dashed") +
geom_line() +
geom_area(alpha = 0.25, stat = "identity")
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities, false_positive = 1 - specificity) %>%
ggplot(mapping = aes(x = specificity, y = false_positive)) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
geom_line() +
geom_area(alpha = 0.25, stat = "identity") +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
labs(x = "False Positive Rate", y = "Sensitivity (True Positive Rate)") +
post_theme
tibble(true.positive = roc.fit1$sensitivities,
specificity = roc.fit1$specificities,
false.positive = 1 - specificity) %>%
ggplot(mapping = aes(x = false.positive, y = true.positive)) +
geom_line(color = "#d55e00") +
geom_area(alpha = 0.25, fill = "#d55e00", position = "identity")
tibble(true.positive = roc.fit1$sensitivities,
specificity = roc.fit1$specificities,
false.positive = 1 - specificity) %>%
ggplot(mapping = aes(x = false.positive, y = true.positive)) +
geom_line(color = "#d55e00") +
geom_area(alpha = 0.25, fill = "#d55e00", position = "identity") +
geom_segment(aes(x = 1, xend = 0, y = 1, yend = 0), color = "black", linetype = "dashed")
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities, false_positive = 1 - specificity) %>%
ggplot(mapping = aes(x = specificity, y = false_positive)) +
geom_line() +
geom_area(alpha = 0.25, stat = "identity") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
labs(x = "False Positive Rate", y = "Sensitivity (True Positive Rate)") +
post_theme
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities, false_positive = 1 - specificity) %>%
ggplot(mapping = aes(x = specificity, y = false_positive)) +
geom_line() +
geom_area(alpha = 0.25, stat = "identity")
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities, false_positive = 1 - specificity) %>%
ggplot(mapping = aes(x = specificity, y = false_positive)) +
geom_line() +
geom_area(alpha = 0.25, position = "identity") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
labs(x = "False Positive Rate", y = "Sensitivity (True Positive Rate)") +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities, false_positive = 1 - specificity) %>%
ggplot(mapping = aes(x = false_positive, y = sensitivity)) +
geom_line() +
geom_area(alpha = 0.25, position = "identity") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
scale_x_reverse(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
labs(x = "False Positive Rate", y = "Sensitivity (True Positive Rate)") +
post_theme
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities, false_positive = 1 - specificity) %>%
ggplot(mapping = aes(x = false_positive, y = sensitivity)) +
geom_line() +
geom_area(alpha = 0.25, position = "identity") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
scale_x_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
labs(x = "False Positive Rate", y = "Sensitivity (True Positive Rate)") +
post_theme
# Chunk 1
# install.packages("tidyverse")
# install.packages("gifski")
# install.packages("lattice")
# install.packages("scales")
# install.packages("kableExtra")
# install.packages("pROC")
library(tidyverse)
library(gifski)
library(lattice)
library(scales)
library(kableExtra)
library(pROC)
# Chunk 2
post_theme <- theme_bw() +
theme(legend.position = "top",
plot.title = element_text(hjust = 0, size = rel(1.5), face = "bold"),
plot.margin = unit(c(1, 1, 1, 1), units = "lines"),
axis.title.x = element_text(family = "Times New Roman", color = "Black", size = 12),
axis.title.y = element_text(family = "Times New Roman", color = "Black", size = 12),
axis.text.x = element_text(family = "Times New Roman", color = "Black", size = 12),
axis.text.y = element_text(family = "Times New Roman", color = "Black", size = 12),
legend.title = element_text(family = "Times New Roman", color = "Black", size = 12),
legend.text = element_text(family = "Times New Roman", color = "Black", size = 12))
# Chunk 3
tibble(event = seq(0, 1, 0.10),
noevent = 1 - event,
odds = event / noevent,
# The default base is Euler's number. I make that explicit in the code below.
logodds = log(odds, base = exp(1))) %>%
round(2) %>%
set_names(c("p", "1 - p", "Odds", "Log-Odds")) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 4
tibble(event = seq(0, 1, 0.01),
noevent = 1 - event,
odds = event / noevent,
logodds = log(odds, base = exp(1))) %>%
ggplot(mapping = aes(x = event, y = odds)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
labs(x = expression("Probability that Y = 1": pi), y = NULL, title = expression(Odds: frac(pi, (1 - pi)))) +
post_theme
# Chunk 5
tibble(event = seq(0, 1, 0.01),
noevent = 1 - event,
odds = event / noevent,
logodds = log(odds, base = exp(1))) %>%
ggplot(mapping = aes(x = event, y = logodds)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
labs(x = expression("Probability that Y = 1": pi), y = NULL, title = expression(Logit: log[e](frac(pi, (1 - pi))))) +
post_theme
# Chunk 6
tibble(pihat = seq(0, 1, 0.10),
var_resid = pihat * (1 - pihat)) %>%
ggplot(mapping = aes(x = pihat, y = var_resid)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
labs(x = expression(hat(pi)), y = NULL, title = expression(var(r[i]))) +
post_theme
# Chunk 7
N <- 250
b0 <- 0
b1 <- 1
# Chunk 8
# Set random seed so results can be reproduced
set.seed(533837)
x1 <- rnorm(n = N, mean = 0, sd = 1)
# Chunk 9
# Set random seed so results can be reproduced
set.seed(533837)
# The prob argument asks for the probability of 1 for each replicate, which is a logistic function of the additive, linear equation
y <- rbinom(n = N, size = 1, prob = plogis(b0 + b1 * x1))
# Chunk 10
data1 <- tibble(id = 1:N, y, x1)
data1 %>%
head() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 11
data1 %>%
ggplot(mapping = aes(x = x1, y = y)) +
geom_hline(yintercept = 0, linetype = "dotted") +
geom_hline(yintercept = 1, linetype = "dotted") +
geom_smooth(mapping = aes(color = "Linear"), method = "glm", formula = y ~ x, method.args = list(family = gaussian(link = "identity")), se = FALSE) +
geom_smooth(mapping = aes(color = "Logistic"), method = "glm", formula = y ~ x, method.args = list(family = binomial(link = "logit")), se = FALSE) +
geom_point(size = 3, alpha = 0.50) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(x = expression(x[1]), y = NULL, title = bquote("Prediction:" ~ hat(pi)), color = "Model Form") +
post_theme
# Chunk 12
glm.fit1 <- glm(y ~ x1, family = gaussian(link = "identity"), data = data1)
# Chunk 13
# Save a data frame with residuals and fitted values (pihat)
pihat_residual1 <- tibble(model_form = "Linear",
pihat = glm.fit1$fitted.values,
residual = residuals.glm
(glm.fit1, type = "response"))
# Plot fitted values (pihat) and residuals
pihat_residual1 %>%
mutate(impossible = ifelse(pihat < 0 | pihat > 1, "Impossible Value", "Possible Value")) %>%
ggplot(mapping = aes(x = pihat, y = residual)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dotted") +
geom_vline(xintercept = 1, linetype = "dotted") +
geom_smooth(method = "loess", se = FALSE, span = 0.80, color = "black") +
geom_point(mapping = aes(color = impossible), size = 3, alpha = 0.50) +
scale_x_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#e69f00", "#000000")) +
labs(x = bquote("Prediction:" ~ hat(pi)), y = expression(Residual: y - hat(pi)), color = NULL) +
post_theme
# Chunk 14
summary(glm.fit1)
# Chunk 15
# Wrapping () around the code below allows me to save and print the results together
(roc.fit1 <- roc(response = glm.fit1$data$y, predictor = glm.fit1$fitted.values, direction = "<", ci = TRUE, ci.method = "boot", boot.n = 1000))
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit1$sensitivities, specificity = roc.fit1$specificities, false_positive = 1 - specificity) %>%
ggplot(mapping = aes(x = false_positive, y = sensitivity)) +
geom_line() +
geom_area(alpha = 0.25, position = "identity") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
scale_x_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
labs(x = "False Positive Rate", y = "Sensitivity (True Positive Rate)") +
post_theme
# Chunk 16
glm.fit2 <- glm(y ~ x1, family = binomial(link = "logit"), data = data1)
# Chunk 17
# Save a data frame with residuals and fitted values (pihat)
pihat_residual2 <- tibble(model_form = "Logistic",
pihat = glm.fit2$fitted.values,
residual = residuals.glm(glm.fit2, type = "response"))
# Plot fitted values (pihat) and residuals from both linear and logistic models
pihat_residual1 %>%
bind_rows(pihat_residual2) %>%
ggplot(mapping = aes(x = pihat, y = residual, color = model_form)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dotted") +
geom_vline(xintercept = 1, linetype = "dotted") +
geom_smooth(method = "loess", se = FALSE, span = 0.80) +
geom_point(size = 3, alpha = 0.50) +
scale_x_continuous(breaks = seq(-0.20, 1.20, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(x = expression(Prediction: hat(pi)), y = expression(Residual: y - hat(pi)), color = "Model Form") +
post_theme
# Chunk 18
summary(glm.fit2)
# Chunk 19
# exp() (see help("exp)) raises the base value to the given value (e.g., by default, it raises Euler's number to the value given). Raising Euler's number to the given log-odds (logit) is the odds: e^log-odds = odds
exp(coefficients(glm.fit2))
# Chunk 20
tibble(Model = rep(c("Population", "Linear", "Logistic"), times = 2),
Coefficient = rep(c("B0 (Intercept)", "B1"), each = 3),
"Log-Odds" = c(b0, qlogis(coefficients(glm.fit1)[1]), coefficients(glm.fit2)[1], b1, qlogis(1 - coefficients(glm.fit1)[2]), coefficients(glm.fit2)[2]),
"Linear Probability" = c(plogis(b0), coefficients(glm.fit1)[1], plogis(coefficients(glm.fit2)[1]), 1 - plogis(b1), coefficients(glm.fit1)[2], 1 - plogis(coefficients(glm.fit2)[2]))) %>%
mutate_if(is.numeric, round, 2) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 21
anova(glm.fit2, test = "Chisq")
# Chunk 22
# Maximum Likelihood for the null model (intercept only, no predictors)
mle_null <- exp(logLik(glm(y ~ 1, family = binomial(link = "logit"), data = data1)))
# Maximum Likelihood for the perfect model
mle_perfect <- 1
# Maximum Likelihood for the model with 1 predictor
mle_1 <- exp(logLik(glm.fit2))
# Null Deviance
D_null <- -2 * (log(mle_null) - log(mle_perfect))
# Model Deviance (1 predictor, k = 1)
D_1 <- -2 * (log(mle_1) - log(mle_perfect))
# Table and print results
tibble(Model = c("Null", "Perfect", "k = 1"),
"Maximum Likelihood" = c(mle_null, mle_perfect, mle_1),
"Log-Likelihood" = log(c(mle_null, mle_perfect, mle_1)),
Deviance = c(D_null, 0, D_1)) %>%
mutate_at("Maximum Likelihood", scientific) %>%
mutate_at(c("Log-Likelihood", "Deviance"), round, 2) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Wrapping () around the code below allows me to save and print the results together
(roc.fit2 <- roc(response = glm.fit2$data$y, predictor = glm.fit2$fitted.values, direction = "<", ci = TRUE, ci.method = "boot", boot.n = 1000))
# sensitivity = true positive rate and specificity = 1 - false negative rate = true negative rate
tibble(sensitivity = roc.fit2$sensitivities, specificity = roc.fit2$specificities, false_positive = 1 - specificity) %>%
ggplot(mapping = aes(x = false_positive, y = sensitivity)) +
geom_line() +
geom_area(alpha = 0.25, position = "identity") +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
scale_x_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.20), labels = percent_format(accuracy = 1)) +
labs(x = "False Positive Rate", y = "Sensitivity (True Positive Rate)") +
post_theme
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
