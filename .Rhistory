"Log-Odds" = c(b0, qlogis(coefficients(glm.fit1)[1]), coefficients(glm.fit2)[1], b1, qlogis(1 - coefficients(glm.fit1)[2]), coefficients(glm.fit2)[2]),
"Linear Probability" = c(plogis(b0), coefficients(glm.fit1)[1], plogis(coefficients(glm.fit2)[1]), 1 - plogis(b1), coefficients(glm.fit1)[2], 1 - plogis(coefficients(glm.fit2)[2]))) %>%
mutate_if(is.numeric, round, 2) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
mean(data1$y)
mean(data1$x1)
plogis(glm.fit2)
plogis(glm.fit2$coefficients)
plogis(glm.fit1$coefficients)
glm.fit1$coefficients
exp(1)
exp(1) - 1
mle_1
logLik(glm.fit2)
scientific(mle_1)
# Table and print results
tibble(Model = c("Null", "Perfect", "k = 1"),
"Maximum Likelihood" = c(mle_null, mle_perfect, mle_1),
"Log-Likelihood" = log(c(mle_null, mle_perfect, mle_1)),
Deviance = c(D_null, 0, D_1)) %>%
mutate_if(is.numeric, round, 2) %>%
mutate_at("Maximum Likelihood", scientific) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Table and print results
tibble(Model = c("Null", "Perfect", "k = 1"),
"Maximum Likelihood" = c(mle_null, mle_perfect, mle_1),
"Log-Likelihood" = log(c(mle_null, mle_perfect, mle_1)),
Deviance = c(D_null, 0, D_1)) %>%
mutate_at("Maximum Likelihood", scientific) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# Table and print results
tibble(Model = c("Null", "Perfect", "k = 1"),
"Maximum Likelihood" = c(mle_null, mle_perfect, mle_1),
"Log-Likelihood" = log(c(mle_null, mle_perfect, mle_1)),
Deviance = c(D_null, 0, D_1)) %>%
mutate_at("Maximum Likelihood", scientific) %>%
mutate_at(c("Log-Likelihood", "Deviance"), round, 2) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
tibble(x1 = glm.fit2$data$x1, logit = qlogis(glm.fit2$fitted.values)) +
tibble(x1 = glm.fit2$data$x1, logit = qlogis(glm.fit2$fitted.values)) %>% ggplot(mapping = aes(x = x1, y = logit)) + geom_point()
tibble(x1 = glm.fit2$data$x1, logit = qlogis(glm.fit2$fitted.values)) %>% ggplot(mapping = aes(x = x1, y = logit)) + geom_line()
mean(qlogis(glm.fit2$fitted.values))
glm.fit2
data1 <- read_delim(file = "http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%2014%20Data%20Sets/CH14PR39.txt", delim = "/t")
View(data1)
data1 <- read_delim(file = "http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%2014%20Data%20Sets/CH14PR39.txt", delim = "\t")
data1 <- read_delim(file = "http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%2014%20Data%20Sets/CH14PR39.txt", delim = "/t")
data1 <- read_delim(file = "http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%2014%20Data%20Sets/CH14PR39.txt", delim = " ")
View(data1)
data1 <- read_delim(file = "http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%2014%20Data%20Sets/CH14PR09.txt", delim = " ", col_names = c("emotional_stability", "able"))
data1 %>%
head() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
data1 <- read_delim(file = "http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%2014%20Data%20Sets/CH14PR09.txt", delim = " ", col_names = c("able", "emotional_stability"))
data1 %>%
head() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
data1 %>%
ggplot(mapping = aes(x = emotional_stability, y = able)) +
geom_hline(yintercept = 0, linetype = "dotted") +
geom_hline(yintercept = 1, linetype = "dotted") +
geom_smooth(mapping = aes(color = "Linear"), method = "glm", formula = y ~ x, method.args = list(family = gaussian(link = "identity")), se = FALSE) +
geom_smooth(mapping = aes(color = "Logistic"), method = "glm", formula = y ~ x, method.args = list(family = binomial(link = "logit")), se = FALSE) +
geom_point(size = 3, alpha = 0.50) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(y = NULL, title = expression(hat(pi)), color = "Model Form") +
post_theme
View(data1)
data1 <- read_delim(file = "http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%2014%20Data%20Sets/CH14PR09.txt", delim = " ", col_names = c("able", "emotional_stability"), col_types = list(col_double()))
data1 %>%
head() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
data1 <- read_delim(file = "http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%2014%20Data%20Sets/CH14PR09.txt", delim = " ", col_names = c("able", "emotional_stability"), col_types = list(col_numeric()))
data1 <- read_delim(file = "http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%2014%20Data%20Sets/CH14PR09.txt", delim = " ", col_names = c("able", "emotional_stability")) %>%
# change able to double
mutate(able = as.double(able))
data1 <- read_delim(file = "http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%2014%20Data%20Sets/CH14PR09.txt", delim = " ", col_names = c("able", "emotional_stability")) %>%
# change able to double
mutate(able = as.double(able))
data1 %>%
head() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
View(data1)
data1 %>%
ggplot(mapping = aes(x = emotional_stability, y = able)) +
geom_hline(yintercept = 0, linetype = "dotted") +
geom_hline(yintercept = 1, linetype = "dotted") +
geom_smooth(mapping = aes(color = "Linear"), method = "glm", formula = y ~ x, method.args = list(family = gaussian(link = "identity")), se = FALSE) +
geom_smooth(mapping = aes(color = "Logistic"), method = "glm", formula = y ~ x, method.args = list(family = binomial(link = "logit")), se = FALSE) +
geom_point(size = 3, alpha = 0.50) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(y = NULL, title = expression(hat(pi)), color = "Model Form") +
post_theme
data1 <- read_delim(file = "http://users.stat.ufl.edu/~rrandles/sta4210/Rclassnotes/data/textdatasets/KutnerData/Chapter%2014%20Data%20Sets/CH14PR09.txt", delim = " ", col_names = c("able", "emotional_stability")) %>%
# convert all variables to numeric/double
mutate_all(as.double)
data1 %>%
head() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
data1 %>%
ggplot(mapping = aes(x = emotional_stability, y = able)) +
geom_hline(yintercept = 0, linetype = "dotted") +
geom_hline(yintercept = 1, linetype = "dotted") +
geom_smooth(mapping = aes(color = "Linear"), method = "glm", formula = y ~ x, method.args = list(family = gaussian(link = "identity")), se = FALSE) +
geom_smooth(mapping = aes(color = "Logistic"), method = "glm", formula = y ~ x, method.args = list(family = binomial(link = "logit")), se = FALSE) +
geom_point(size = 3, alpha = 0.50) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(y = NULL, title = expression(hat(pi)), color = "Model Form") +
post_theme
N <- 250
b0 <- 0
b1 <- 1
data1 <- tibble(id = 1:N, y, x1)
data1 %>%
head() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
N <- 250
b0 <- 0
b1 <- 1
# Set random seed so results can be reproduced
set.seed(533837)
x1 <- rnorm(n = N, mean = 0, sd = 1)
# Set random seed so results can be reproduced
set.seed(533837)
x1 <- rnorm(n = N, mean = 0, sd = 1)
# Set random seed so results can be reproduced
set.seed(533837)
y <- rbinom(n = N, size = 1, prob = plogis(b0 + b1 * x1))
data1 <- tibble(id = 1:N, y, x1)
data1 %>%
head() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
data1 %>%
ggplot(mapping = aes(x = x1, y = y)) +
geom_hline(yintercept = 0, linetype = "dotted") +
geom_hline(yintercept = 1, linetype = "dotted") +
geom_smooth(mapping = aes(color = "Linear"), method = "glm", formula = y ~ x, method.args = list(family = gaussian(link = "identity")), se = FALSE) +
geom_smooth(mapping = aes(color = "Logistic"), method = "glm", formula = y ~ x, method.args = list(family = binomial(link = "logit")), se = FALSE) +
geom_point(size = 3, alpha = 0.50) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(y = NULL, title = expression(hat(pi)), color = "Model Form") +
post_theme
blogdown:::serve_site()
median(c(132, 80))
data1 %>%
ggplot(mapping = aes(x = x1, y = y)) +
geom_hline(yintercept = 0, linetype = "dotted") +
geom_hline(yintercept = 1, linetype = "dotted") +
geom_smooth(mapping = aes(color = "Linear"), method = "glm", formula = y ~ x, method.args = list(family = gaussian(link = "identity")), se = FALSE) +
geom_smooth(mapping = aes(color = "Logistic"), method = "glm", formula = y ~ x, method.args = list(family = binomial(link = "logit")), se = FALSE) +
geom_point(size = 3, alpha = 0.50) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(y = NULL, title = expression(hat(pi)), color = "Model Form") +
post_theme
# Save a data frame with residuals and fitted values (pihat)
pihat_residual1 <- tibble(model_form = "Linear",
pihat = glm.fit1$fitted.values,
residual = residuals.glm
(glm.fit1, type = "response"))
# Plot fitted values (pihat) and residuals
pihat_residual1 %>%
mutate(impossible = ifelse(pihat < 0 | pihat > 1, "Impossible Value", "Possible Value")) %>%
ggplot(mapping = aes(x = pihat, y = residual)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dotted") +
geom_vline(xintercept = 1, linetype = "dotted") +
geom_smooth(method = "loess", se = FALSE, span = 0.80, color = "black") +
geom_point(mapping = aes(color = impossible), size = 3, alpha = 0.50) +
scale_x_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(x = expression(hat(pi)), y = expression(Residual: y - hat(pi)), color = NULL) +
post_theme
data1 %>%
ggplot(mapping = aes(x = x1, y = y)) +
geom_hline(yintercept = 0, linetype = "dotted") +
geom_hline(yintercept = 1, linetype = "dotted") +
geom_smooth(mapping = aes(color = "Linear"), method = "glm", formula = y ~ x, method.args = list(family = gaussian(link = "identity")), se = FALSE) +
geom_smooth(mapping = aes(color = "Logistic"), method = "glm", formula = y ~ x, method.args = list(family = binomial(link = "logit")), se = FALSE) +
geom_point(size = 3, alpha = 0.50) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(y = NULL, title = bquote("Prediction:" ~ hat(pi)), color = "Model Form") +
post_theme
# Plot fitted values (pihat) and residuals
pihat_residual1 %>%
mutate(impossible = ifelse(pihat < 0 | pihat > 1, "Impossible Value", "Possible Value")) %>%
ggplot(mapping = aes(x = pihat, y = residual)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dotted") +
geom_vline(xintercept = 1, linetype = "dotted") +
geom_smooth(method = "loess", se = FALSE, span = 0.80, color = "black") +
geom_point(mapping = aes(color = impossible), size = 3, alpha = 0.50) +
scale_x_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(x = bquote("Prediction:" ~ hat(pi)), y = expression(Residual: y - hat(pi)), color = NULL) +
post_theme
# Plot fitted values (pihat) and residuals from both linear and logistic models
pihat_residual1 %>%
bind_rows(pihat_residual2) %>%
ggplot(mapping = aes(x = pihat, y = residual, color = model_form)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dotted") +
geom_vline(xintercept = 1, linetype = "dotted") +
geom_smooth(method = "loess", se = FALSE, span = 0.80) +
geom_point(size = 3, alpha = 0.50) +
scale_x_continuous(breaks = seq(-0.20, 1.20, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(x = expression(Prediction: hat(pi)), y = expression(Residual: y - hat(pi)), color = "Model Form") +
post_theme
data2 %>%
ggplot(mapping = aes(x = group_fac, y = y, fill = group_fac)) +
stat_summary(geom = "bar", fun.data = mean_cl_normal) +
scale_y_continuous(breaks = seq(0, 1, 0.05), labels = percent_format(accuracy = 1)) +
labs(x = NULL, y = NULL, title = expression(Prediction: hat(pi))) +
post_theme
N <- 250
# Determine the logit for 15%
(b0 <- qlogis(0.15))
b1 <- -1
# Set random seed so results can be reproduced
set.seed(760814)
x1 <- rep(c(-0.5, 0.5), each = N / 2)
# Set random seed so results can be reproduced
set.seed(760814)
y <- rbinom(n = N, size = 1, prob = plogis(b0 + b1 * x1))
data2 <- tibble(id = 1:N, y, x1, group_fac = factor(x1, labels = LETTERS[1:2]))
data2 %>%
sample_n(size = 6) %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
data2 %>%
ggplot(mapping = aes(x = group_fac, y = y, fill = group_fac)) +
stat_summary(geom = "bar", fun.data = mean_cl_normal) +
scale_y_continuous(breaks = seq(0, 1, 0.05), labels = percent_format(accuracy = 1)) +
labs(x = NULL, y = NULL, title = expression(Prediction: hat(pi))) +
post_theme
data2 %>%
ggplot(mapping = aes(x = group_fac, y = y, fill = group_fac)) +
stat_summary(geom = "bar", fun.data = mean_cl_normal) +
scale_y_continuous(breaks = seq(0, 1, 0.05), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#d55e00", "#0072b2")) +
labs(x = NULL, y = NULL, title = expression(Prediction: hat(pi))) +
post_theme
blogdown:::serve_site()
sample(1E6, 1)
N <- 250
(b0 <- qlogis(0.75))
b1 <- 1
b2 <- 1
# Set random seed so results can be reproduced
set.seed(303786)
x1 <- rnorm(n = N, mean = 0, sd = 1))
# Set random seed so results can be reproduced
set.seed(303786)
x1 <- rnorm(n = N, mean = 0, sd = 1)
# Set random seed so results can be reproduced
set.seed(303786)
y <- rbinom(n = N, size = 1, prob = plogis(b0 + b1 * x1 + b2 * x1^2))
data4 <- tibble(id = 1:N, y, x1, x1_squared = x1^2)
data4 %>%
head() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
?poly
glm.fit7 <- glm(y ~ poly(x2, degree = 2), family = gaussian(link = "identity"), data = data3)
glm.fit7 <- glm(y ~ poly(x2, degree = 2), family = gaussian(link = "identity"), data = data4)
glm.fit7 <- glm(y ~ poly(x1, degree = 2), family = gaussian(link = "identity"), data = data4)
# Save a data frame with residuals and fitted values (pihat)
pihat_residual5 <- tibble(model_form = "Linear",
x1 = glm.fit7$data$x1,
x1_squared = glm.fit7$data$x1_squared,
pihat = glm.fit7$fitted.values,
residual = residuals.glm(glm.fit7, type = "response"))
# Plot fitted values (pihat) and residuals
pihat_residual5 %>%
mutate(impossible = ifelse(pihat < 0 | pihat > 1, "Impossible Value", "Possible Value")) %>%
gather(key = predictor, value = value, x1, x1_squared, pihat) %>%
ggplot(mapping = aes(x = value, y = residual)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(method = "loess", se = FALSE, span = 0.80, color = "black") +
geom_point(mapping = aes(color = impossible), size = 3, alpha = 0.50) +
scale_y_continuous(breaks = seq(-1, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
facet_wrap(facets = ~ predictor, scales = "free_x") +
labs(x = NULL, y = expression(Residual: y - hat(pi)), color = NULL) +
post_theme
summary(glm.fit7)
roc(response = glm.fit7$data$y, predictor = glm.fit7$fitted.values, direction = "<", plot = TRUE, ci = TRUE, ci.method = "boot", boot.n = 1000)
glm.fit8 <- glm(y ~ poly(x1, degree = 2), family = binomial(link = "logit"), data = data4)
# Save a data frame with residuals and fitted values (pihat)
pihat_residual6 <- tibble(model_form = "Logistic",
x1 = glm.fit8$data$x1,
x1_squared = glm.fit8$data$x1_squared,
pihat = glm.fit8$fitted.values,
residual = residuals.glm(glm.fit8, type = "response"))
# Plot fitted values (pihat) and residuals from both linear and logistic models
pihat_residual5 %>%
bind_rows(pihat_residual6) %>%
mutate(impossible = ifelse(pihat < 0 | pihat > 1, "Impossible Value", "Possible Value")) %>%
gather(key = predictor, value = value, x1, x1_squared, pihat) %>%
ggplot(mapping = aes(x = value, y = residual, color = model_form)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(method = "loess", se = FALSE, span = 0.80, color = "black") +
geom_point(size = 3, alpha = 0.50) +
scale_y_continuous(breaks = seq(-1, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
facet_wrap(facets = ~ predictor, scales = "free_x") +
labs(x = NULL, y = expression(Residual: y - hat(pi)), color = "Model Form") +
post_theme
# Save a data frame with residuals and fitted values (pihat)
pihat_residual5 <- tibble(model_form = "Linear",
x1 = glm.fit7$data$x1,
x1_squared = glm.fit7$data$x1_squared,
pihat = glm.fit7$fitted.values,
residual = residuals.glm(glm.fit7, type = "response"))
# Plot fitted values (pihat) and residuals
pihat_residual5 %>%
mutate(impossible = ifelse(pihat < 0 | pihat > 1, "Impossible Value", "Possible Value")) %>%
gather(key = predictor, value = value, x1, x1_squared, pihat) %>%
ggplot(mapping = aes(x = value, y = residual)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(method = "loess", se = FALSE, span = 0.80, color = "black") +
geom_point(mapping = aes(color = impossible), size = 3, alpha = 0.50) +
scale_y_continuous(breaks = seq(-1, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
facet_wrap(facets = ~ predictor, scales = "free_x") +
labs(x = NULL, y = expression(Residual: y - hat(pi)), color = NULL) +
post_theme
# Save a data frame with residuals and fitted values (pihat)
pihat_residual6 <- tibble(model_form = "Logistic",
x1 = glm.fit8$data$x1,
x1_squared = glm.fit8$data$x1_squared,
pihat = glm.fit8$fitted.values,
residual = residuals.glm(glm.fit8, type = "response"))
# Plot fitted values (pihat) and residuals from both linear and logistic models
pihat_residual5 %>%
bind_rows(pihat_residual6) %>%
mutate(impossible = ifelse(pihat < 0 | pihat > 1, "Impossible Value", "Possible Value")) %>%
gather(key = predictor, value = value, x1, x1_squared, pihat) %>%
ggplot(mapping = aes(x = value, y = residual, color = model_form)) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_smooth(method = "loess", se = FALSE, span = 0.80) +
geom_point(size = 3, alpha = 0.50) +
scale_y_continuous(breaks = seq(-1, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
facet_wrap(facets = ~ predictor, scales = "free_x") +
labs(x = NULL, y = expression(Residual: y - hat(pi)), color = "Model Form") +
post_theme
summary(glm.fit8)
roc(response = glm.fit8$data$y, predictor = glm.fit8$fitted.values, direction = "<", plot = TRUE, ci = TRUE, ci.method = "boot", boot.n = 1000)
tibble(linear_pihat = glm.fit7$fitted.values,
logistic_pihat = glm.fit8$fitted.values) %>%
ggplot(mapping = aes(x = linear_pihat, y = logistic_pihat)) +
geom_vline(xintercept = 0, linetype = "dotted") +
geom_vline(xintercept = 1, linetype = "dotted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
geom_point(size = 3, alpha = 0.50) +
scale_x_continuous(breaks = seq(-0.20, 1.20, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(-1, 1, 0.20), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(x = "Linear Predicted Values", y = "Logistic Predicted Values") +
post_theme
tibble(linear_pihat = glm.fit7$fitted.values,
logistic_pihat = glm.fit8$fitted.values) %>%
ggplot(mapping = aes(x = linear_pihat, y = logistic_pihat)) +
geom_vline(xintercept = 0, linetype = "dotted") +
geom_vline(xintercept = 1, linetype = "dotted") +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
geom_point(size = 3, alpha = 0.50) +
scale_x_continuous(breaks = seq(-0.20, 1.20, 0.20), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(-1, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("#d55e00", "#0072b2")) +
labs(x = "Linear Predicted Values", y = "Logistic Predicted Values") +
post_theme
N <- 250
(b0 <- qlogis(0.75))
b1 <- 1
b2 <- 1
# Set random seed so results can be reproduced
set.seed(614513)
x1 <- rnorm(n = N, mean = 0, sd = 1)
x2 <- rnorm(n = N, mean = 0, sd = 1)
# Set random seed so results can be reproduced
set.seed(614513)
y <- rbinom(n = N, size = 1, prob = plogis(b0 + b1 * x1 + b2 * x2))
# Set random seed so results can be reproduced
set.seed(614513)
y <- rbinom(n = N, size = 1, prob = plogis(b0 + b1 * x1 + b2 * x2))
data3 <- tibble(id = 1:N, y, x1, x2)
data3 %>%
head() %>%
kable() %>%
kable_styling(bootstrap_options = c("striped", "hover"))
glm.fit5 <- glm(y ~ x1 + x2, family = gaussian(link = "identity"), data = data3)
glm.fit6 <- glm(y ~ x1 + x2, family = binomial(link = "logit"), data = data3)
# 35 positions for z axis rotation
for (i in seq(0, 350 , 10)) {
print(
expand.grid(x1 = seq(-3, 3, length.out = 10),
x2 = seq(-3, 3, length.out = 10)) %>%
mutate(pihat_linear = predict.glm(glm.fit5, newdata = data.frame(x1, x2), type = "response"),
pihat_logistic = predict.glm(glm.fit6, newdata = data.frame(x1, x2), type = "response")) %>%
wireframe(pihat_linear ~ x1 + x2, data = ., drape = TRUE, colorkey = TRUE, scales = list(arrows = FALSE), screen = list(z = i, x = -60), col.regions = colorRampPalette(c("#0072b2", "#d55e00"))(100), zlab = expression(hat(pi)))
)
}
# 35 positions for z axis rotation
for (i in seq(0, 350 , 10)) {
print(
expand.grid(x1 = seq(-3, 3, length.out = 10),
x2 = seq(-3, 3, length.out = 10)) %>%
mutate(pihat_linear = predict.glm(glm.fit5, newdata = data.frame(x1, x2), type = "response"),
pihat_logistic = predict.glm(glm.fit6, newdata = data.frame(x1, x2), type = "response")) %>%
wireframe(pihat_logistic ~ x1 + x2, data = ., drape = TRUE, colorkey = TRUE, scales = list(arrows = FALSE), screen = list(z = i, x = -60), col.regions = colorRampPalette(c("#0072b2", "#d55e00"))(100), zlab = expression(hat(pi)))
)
}
# 35 positions for z axis rotation
for (i in seq(0, 350 , 10)) {
print(
expand.grid(x1 = seq(-3, 3, length.out = 10),
x2 = seq(-3, 3, length.out = 10)) %>%
mutate(pihat_linear = predict.glm(glm.fit7, newdata = data.frame(x1, x2), type = "response"),
pihat_logistic = predict.glm(glm.fit8, newdata = data.frame(x1, x2), type = "response")) %>%
wireframe(pihat_linear ~ poly(x1, degree = 2), data = ., drape = TRUE, colorkey = TRUE, scales = list(arrows = FALSE), screen = list(z = i, x = -60), col.regions = colorRampPalette(c("#0072b2", "#d55e00"))(100), zlab = expression(hat(pi)))
)
}
# 35 positions for z axis rotation
for (i in seq(0, 350 , 10)) {
print(
expand.grid(x1 = seq(-3, 3, length.out = 10),
x2 = seq(-3, 3, length.out = 10)) %>%
mutate(pihat_linear = predict.glm(glm.fit7, newdata = data.frame(x1, x2), type = "response"),
pihat_logistic = predict.glm(glm.fit8, newdata = data.frame(x1, x2), type = "response")) %>%
wireframe(pihat_linear ~ x1 + x1_squared, data = ., drape = TRUE, colorkey = TRUE, scales = list(arrows = FALSE), screen = list(z = i, x = -60), col.regions = colorRampPalette(c("#0072b2", "#d55e00"))(100), zlab = expression(hat(pi)))
)
}
# 35 positions for z axis rotation
for (i in seq(0, 350 , 10)) {
print(
expand.grid(x1 = seq(-3, 3, length.out = 10),
x1_squared = seq(-3, 3, length.out = 10)^2) %>%
mutate(pihat_linear = predict.glm(glm.fit7, newdata = data.frame(x1, x2), type = "response"),
pihat_logistic = predict.glm(glm.fit8, newdata = data.frame(x1, x2), type = "response")) %>%
wireframe(pihat_linear ~ x1 + x1_squared, data = ., drape = TRUE, colorkey = TRUE, scales = list(arrows = FALSE), screen = list(z = i, x = -60), col.regions = colorRampPalette(c("#0072b2", "#d55e00"))(100), zlab = expression(hat(pi)))
)
}
# 35 positions for z axis rotation
for (i in seq(0, 350 , 10)) {
print(
expand.grid(x1 = seq(-3, 3, length.out = 10),
x1_squared = seq(-3, 3, length.out = 10)^2) %>%
mutate(pihat_linear = predict.glm(glm.fit7, newdata = data.frame(x1, x1_squared), type = "response"),
pihat_logistic = predict.glm(glm.fit8, newdata = data.frame(x1, x1_squared), type = "response")) %>%
wireframe(pihat_linear ~ x1 + x1_squared, data = ., drape = TRUE, colorkey = TRUE, scales = list(arrows = FALSE), screen = list(z = i, x = -60), col.regions = colorRampPalette(c("#0072b2", "#d55e00"))(100), zlab = expression(hat(pi)))
)
}
print(
expand.grid(x1 = seq(-3, 3, length.out = 10),
x1_squared = seq(-3, 3, length.out = 10)^2) %>%
mutate(pihat_linear = predict.glm(glm.fit7, newdata = data.frame(x1, x1_squared), type = "response"),
pihat_logistic = predict.glm(glm.fit8, newdata = data.frame(x1, x1_squared), type = "response")) %>%
wireframe(pihat_linear ~ x1 + x1_squared, data = ., drape = TRUE, colorkey = TRUE, scales = list(arrows = FALSE), screen = list(z = i, x = -60), col.regions = colorRampPalette(c("#0072b2", "#d55e00"))(100), zlab = expression(hat(pi)), ylab = expression(x^2))
)
# 35 positions for z axis rotation
for (i in seq(0, 350 , 10)) {
print(
expand.grid(x1 = seq(-3, 3, length.out = 10),
x1_squared = seq(-3, 3, length.out = 10)^2) %>%
mutate(pihat_linear = predict.glm(glm.fit7, newdata = data.frame(x1, x1_squared), type = "response"),
pihat_logistic = predict.glm(glm.fit8, newdata = data.frame(x1, x1_squared), type = "response")) %>%
wireframe(pihat_logistic ~ x1 + x1_squared, data = ., drape = TRUE, colorkey = TRUE, scales = list(arrows = FALSE), screen = list(z = i, x = -60), col.regions = colorRampPalette(c("#0072b2", "#d55e00"))(100), zlab = expression(hat(pi)), ylab = expression(x^2))
)
}
print(
expand.grid(x1 = seq(-3, 3, length.out = 10),
x1_squared = seq(-3, 3, length.out = 10)^2) %>%
mutate(pihat_linear = predict.glm(glm.fit7, newdata = data.frame(x1, x1_squared), type = "response"),
pihat_logistic = predict.glm(glm.fit8, newdata = data.frame(x1, x1_squared), type = "response")) %>%
wireframe(pihat_linear ~ x1 + x1_squared, data = ., drape = TRUE, colorkey = TRUE, scales = list(arrows = FALSE), screen = list(z = i, x = -60), col.regions = colorRampPalette(c("#0072b2", "#d55e00"))(100), zlab = expression(hat(pi)), ylab = expression(x[1]^2))
)
print(
expand.grid(x1 = seq(-3, 3, length.out = 10),
x2 = seq(-3, 3, length.out = 10)) %>%
mutate(pihat_linear = predict.glm(glm.fit5, newdata = data.frame(x1, x2), type = "response"),
pihat_logistic = predict.glm(glm.fit6, newdata = data.frame(x1, x2), type = "response")) %>%
wireframe(pihat_logistic ~ x1 + x2, data = ., drape = TRUE, colorkey = TRUE, scales = list(arrows = FALSE), screen = list(z = i, x = -60), col.regions = colorRampPalette(c("#0072b2", "#d55e00"))(100), zlab = expression(hat(pi)), xlab = expression(x[1]), ylab = expression(x[2]))
)
print(
expand.grid(x1 = seq(-3, 3, length.out = 10),
x2 = seq(-3, 3, length.out = 10)) %>%
mutate(pihat_linear = predict.glm(glm.fit5, newdata = data.frame(x1, x2), type = "response"),
pihat_logistic = predict.glm(glm.fit6, newdata = data.frame(x1, x2), type = "response")) %>%
wireframe(pihat_linear ~ x1 + x2, data = ., drape = TRUE, colorkey = TRUE, scales = list(arrows = FALSE), screen = list(z = i, x = -60), col.regions = colorRampPalette(c("#0072b2", "#d55e00"))(100), zlab = expression(hat(pi)), xlab = expression(x[1]), ylab = expression(x[2]))
)
