name_recognition1 = color_tile("white", "#0072b2")(name_recognition1),
cell_size = color_tile("white", "#009e73")(cell_size)) %>%
select(poll_avrg1_group, name_recognition1, cell_size, lost, won) %>%
arrange(poll_avrg1_group, name_recognition1) %>%
set_names(c("National Polling Average", "Name Recognition", "# of Candidates", "# Lost", "# Won")) %>%
kable(format = "html", escape = FALSE, caption = "Number of Candidates Who Won Their Party's Nomination Depending on Their National Polling Average and Name Recognition") %>%
kable_styling("hover", full_width = F) %>%
column_spec(1:5, bold = TRUE)
primary_pollavrg_nr %>%
filter(!is.na(name_recognition1)) %>%
count(poll_avrg1_group, name_recognition1, nominee) %>%
group_by(poll_avrg1_group, name_recognition1) %>%
mutate(nominee = recode(nominee, "0" = "lost", "1" = "won")) %>%
spread(key = nominee, value = n) %>%
mutate(cell_size = sum(c(lost, won), na.rm = TRUE)) %>%
ungroup() %>%
mutate_if(is.numeric, function(x) ifelse(is.na(x), 0, x)) %>%
mutate(poll_avrg1_group = factor(poll_avrg1_group, levels = levels(poll_avrg1_group), labels = c("0-2%", "2-5%", "5-10%", "10-20%", "20-35%", "35%+")),
name_recognition1 = color_tile("white", "#0072b2")(name_recognition1),
cell_size = color_tile("white", "#009e73")(cell_size)) %>%
select(poll_avrg1_group, name_recognition1, cell_size, lost, won) %>%
arrange(desc(poll_avrg1_group), desc(name_recognition1)) %>%
set_names(c("National Polling Average", "Name Recognition", "# of Candidates", "# Lost", "# Won")) %>%
kable(format = "html", escape = FALSE, caption = "Number of Candidates Who Won Their Party's Nomination Depending on Their National Polling Average and Name Recognition") %>%
kable_styling("hover", full_width = F) %>%
column_spec(1:5, bold = TRUE)
primary_pollavrg_nr %>%
filter(!is.na(name_recognition1)) %>%
count(poll_avrg1_group, name_recognition1, nominee) %>%
group_by(poll_avrg1_group, name_recognition1) %>%
mutate(nominee = recode(nominee, "0" = "lost", "1" = "won")) %>%
spread(key = nominee, value = n) %>%
mutate(cell_size = sum(c(lost, won), na.rm = TRUE)) %>%
ungroup() %>%
mutate_if(is.numeric, function(x) ifelse(is.na(x), 0, x)) %>%
mutate(poll_avrg1_group = factor(poll_avrg1_group, levels = levels(poll_avrg1_group), labels = c("0-2%", "2-5%", "5-10%", "10-20%", "20-35%", "35%+")),
name_recognition1 = color_tile("white", "#0072b2")(name_recognition1),
cell_size = color_tile("white", "#009e73")(cell_size)) %>%
select(poll_avrg1_group, name_recognition1, cell_size, lost, won) %>%
arrange(desc(poll_avrg1_group), name_recognition1) %>%
set_names(c("National Polling Average", "Name Recognition", "# of Candidates", "# Lost", "# Won")) %>%
kable(format = "html", escape = FALSE, caption = "Number of Candidates Who Won Their Party's Nomination Depending on Their National Polling Average and Name Recognition") %>%
kable_styling("hover", full_width = F) %>%
column_spec(1:5, bold = TRUE)
blogdown:::serve_site()
# Install and/or load packages
# install.packages("tidyverse")
# install.packages("readxl")
# install.packages("scales")
# install.packages("knitr")
# install.packages("kableExtra")
# install.packages("formattable")
# install.packages("ggthemes")
# install.packages("ggrepel")
# install.packages("effects")
# install.packages("pROC")
library(tidyverse)
library(readxl)
library(scales)
library(knitr)
library(kableExtra)
library(formattable)
library(ggthemes)
library(ggrepel)
library(effects)
library(pROC)
# Read polling average and name recognition data
primary_pollavrg_nr <- read_xlsx(path = "data/president_primary_pollavrg_name_recognition.xlsx", sheet = "clean", na = "-9999")
# Read primary results data
presidential_primary_results <- paste0(rep(c("democratic", "republican"), times = length(seq(1972, 2016, 4))), rep(seq(1972, 2016, 4), each = 2)) %>%
map_df(function(primary_sheet) {
# read sheet
# restructure so each candidate gets a row
# add a primary party and primary year variable
read_xlsx(path = "data/presidential_primary_results.xlsx", sheet = primary_sheet, na = "-9999") %>%
gather(key = candidate_lastname, value = result, -c(Date, State, note, metric)) %>%
mutate(primary_sheet = primary_sheet,
primary_party = ifelse(str_detect(primary_sheet, pattern = "democratic"), "Democratic", "Republican"),
election_year = parse_number(primary_sheet),
incumbent_char = ifelse(str_detect(candidate_lastname, pattern = " incumbent"), "Incumbent",
ifelse(!is.na(candidate_lastname), "Not incumbent", NA)),
candidate_lastname = str_replace(candidate_lastname, pattern = " incumbent", replacement = ""),
candidate_lastname = ifelse(candidate_lastname == "Ronald Reagan Yes", "Reagan", candidate_lastname))
}) %>%
filter(primary_sheet != "republican1972" & metric == "count") %>%
rename(count = result) %>%
# vote count by election year, part, and candidate last name
group_by(election_year, primary_party, candidate_lastname) %>%
mutate(primary_votecount = sum(count, na.rm = TRUE)) %>%
# vote share by election year and party
group_by(election_year, primary_party) %>%
mutate(primary_voteshare = primary_votecount / sum(count, na.rm = TRUE)) %>%
ungroup()
# Create "High" and "Low" Name Recognition category
## First Half
primary_pollavrg_nr$well_known1_char <- with(primary_pollavrg_nr,
ifelse(name_recognition1 > 0.40, "Well known (> 40%)",
ifelse(name_recognition1 < 0.60, "Not well known (< 60%)", NA)))
## Second Half
primary_pollavrg_nr$well_known2_char <- with(primary_pollavrg_nr,
ifelse(name_recognition2 > 0.40, "Well known (> 40%)",
ifelse(name_recognition2 < 0.60, "Not well known (< 60%)", NA)))
# Create bins of polling averages
## First Half
primary_pollavrg_nr$poll_avrg1_group <- with(primary_pollavrg_nr, cut(poll_avrg1, breaks = c(-Inf, 0.02, 0.05, 0.10, 0.20, 0.35, Inf), include.lowest = FALSE))
## Second Half
primary_pollavrg_nr$poll_avrg2_group <- with(primary_pollavrg_nr, cut(poll_avrg2, breaks = c(-Inf, 0.02, 0.05, 0.10, 0.20, 0.35, Inf), include.lowest = FALSE))
# Candidate Last Name
primary_pollavrg_nr$candidate_lastname <- word(primary_pollavrg_nr$candidate, start = -1)
# Join polling average and primary results data
presidential_primary_results_pollavrg <- presidential_primary_results %>%
full_join(primary_pollavrg_nr, by = c("candidate_lastname", "primary_party", "election_year"))
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fill = "#cc79a7", color = "#cc79a7") +
geom_point(size = 4, alpha = 0.50, color = "#cc79a7", position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
facet_wrap(facets = ~ well_known1_char) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016)") +
theme_fivethirtyeight()
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = well_known1_char, color = well_known1_char), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit"))) +
geom_point(mapping = aes(color = well_known1_char), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#F36C02", "#7E499F")) +
scale_color_manual(values = c("#F36C02", "#7E499F")) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016)") +
theme_fivethirtyeight()
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = well_known1_char, color = well_known1_char), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fullrange = TRUE) +
geom_point(mapping = aes(color = well_known1_char), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#F36C02", "#7E499F")) +
scale_color_manual(values = c("#F36C02", "#7E499F")) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016)") +
theme_fivethirtyeight()
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = well_known1_char, color = well_known1_char), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fullrange = TRUE) +
geom_point(mapping = aes(color = well_known1_char), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#F36C02", "#7E499F")) +
scale_color_manual(values = c("#F36C02", "#7E499F")) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016)", fill = "Name Recognition %", color = "Name Recognition %") +
theme_fivethirtyeight()
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = well_known1_char, color = well_known1_char), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fullrange = TRUE) +
geom_point(mapping = aes(color = well_known1_char), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#F36C02", "#7E499F")) +
scale_color_manual(values = c("#F36C02", "#7E499F")) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016), but does it depend on name recognition?", fill = "Name Recognition %", color = "Name Recognition %") +
theme_fivethirtyeight()
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = well_known1_char, color = well_known1_char), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fullrange = TRUE) +
geom_point(mapping = aes(color = well_known1_char), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#F36C02", "#7E499F")) +
scale_color_manual(values = c("#F36C02", "#7E499F")) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016), \nbut does it depend on name recognition?", fill = "Name Recognition %", color = "Name Recognition %") +
theme_fivethirtyeight()
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = well_known1_char, color = well_known1_char), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fullrange = TRUE) +
geom_point(mapping = aes(color = well_known1_char), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#F36C02", "#7E499F")) +
scale_color_manual(values = c("#F36C02", "#7E499F")) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016) \n(Does it depend on name recognition?)", fill = "Name Recognition %", color = "Name Recognition %") +
theme_fivethirtyeight()
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = well_known1_char, color = well_known1_char), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fullrange = TRUE) +
geom_point(mapping = aes(color = well_known1_char), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#F36C02", "#7E499F")) +
scale_color_manual(values = c("#F36C02", "#7E499F")) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016) \n(Does that prediction depend on name recognition?)", fill = "Name Recognition %", color = "Name Recognition %") +
theme_fivethirtyeight()
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = primary_party, color = primary_party), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fullrange = TRUE) +
geom_point(mapping = aes(color = primary_party), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#0072b2", "#d55e00")) +
scale_color_manual(values = c("#0072b2", "#d55e00")) +
facet_grid(facets = ~ primary_party) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016) \n(But it depends on major political party.)", fill = "Major Political Party", color = "Major Political Party") +
theme_fivethirtyeight()
blogdown:::serve_site()
glm.fit1 <- glm(nominee ~ scale(poll_avrg1, scale = FALSE) * scale(name_recognition1, scale = FALSE), data = primary_pollavrg_nr, family = binomial(link = "logit"), na.action = na.exclude)
predict(glm.fit1, newdata = data.frame(poll_avrg1 = 0.20))
predict(glm.fit1, newdata = data.frame(poll_avrg1 = 0.20, name_recognition1 < 0.60))
predict(glm.fit1, newdata = expand.grid(poll_avrg1 = 0.20, name_recognition1 = c(0.20, 0.40, 0.60)))
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = well_known1_char, color = well_known1_char), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fullrange = TRUE) +
geom_point(mapping = aes(color = well_known1_char), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#F36C02", "#7E499F")) +
scale_color_manual(values = c("#F36C02", "#7E499F")) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016) \n(Does that prediction depend on name recognition?)", fill = "Name Recognition %", color = "Name Recognition %") +
theme_fivethirtyeight()
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = well_known1_char, color = well_known1_char), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fullrange = TRUE) +
geom_point(mapping = aes(color = well_known1_char), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#F36C02", "#7E499F")) +
scale_color_manual(values = c("#F36C02", "#7E499F")) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016) \n(Does that prediction depend on name recognition?)", fill = "Name Recognition %", color = "Name Recognition %") +
theme_fivethirtyeight() %>% ggplot_build()
p <- primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = well_known1_char, color = well_known1_char), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fullrange = TRUE) +
geom_point(mapping = aes(color = well_known1_char), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#F36C02", "#7E499F")) +
scale_color_manual(values = c("#F36C02", "#7E499F")) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016) \n(Does that prediction depend on name recognition?)", fill = "Name Recognition %", color = "Name Recognition %") +
theme_fivethirtyeight()
ggplot_build(p)
ggplot_build(p) %>% str()
bp <- ggplot_build(p)
bp$data
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = well_known1_char, color = well_known1_char), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fullrange = TRUE) +
geom_point(mapping = aes(color = well_known1_char), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#F36C02", "#7E499F")) +
scale_color_manual(values = c("#F36C02", "#7E499F")) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016) \n(Does that prediction depend on name recognition?)", fill = "Name Recognition %", color = "Name Recognition %", caption = "The colored ribbons represent 95% confidence intervals. The orange ribbon envelops most of the figure because no data are available in that range.") +
theme_fivethirtyeight()
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = well_known1_char, color = well_known1_char), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fullrange = TRUE) +
geom_point(mapping = aes(color = well_known1_char), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#F36C02", "#7E499F")) +
scale_color_manual(values = c("#F36C02", "#7E499F")) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016) \n(Does that prediction depend on name recognition?)", fill = "Name Recognition %", color = "Name Recognition %", caption = "The colored ribbons represent 95% confidence intervals.\nThe orange ribbon envelops most of the figure because no data are available in that range.") +
theme_fivethirtyeight()
primary_pollavrg_nr %>%
ggplot(mapping = aes(x = poll_avrg1, y = nominee)) +
geom_hline(yintercept = 0.50, linetype = "dotted") +
geom_smooth(mapping = aes(fill = well_known1_char, color = well_known1_char), method = "glm", se = TRUE, method.args = list(family = binomial(link = "logit")), fullrange = TRUE) +
geom_point(mapping = aes(color = well_known1_char), size = 4, alpha = 0.50, position = position_jitter(height = 0.005, seed = 473928)) +
scale_x_continuous(breaks = seq(0, 1, 0.10), labels = percent_format(accuracy = 1)) +
scale_y_continuous(breaks = seq(0, 1, 0.25), labels = percent_format(accuracy = 1)) +
scale_fill_manual(values = c("#F36C02", "#7E499F")) +
scale_color_manual(values = c("#F36C02", "#7E499F")) +
labs(title = "Probability of Winning the Nomination", subtitle = "National primay polls predict primary nomination success (1972-2016) \n(Does that prediction depend on name recognition?)", fill = "Name Recognition %", color = "Name Recognition %", caption = "The colored ribbons represent 95% confidence intervals.\nThe orange ribbon (not well known) envelops most of the figure because no data are available in that range.") +
theme_fivethirtyeight()
# polling averages only
# mean center continuous predictors
glm.fit0 <- glm(nominee ~ scale(poll_avrg1, scale = FALSE), data = primary_pollavrg_nr, family = binomial(link = "logit"), na.action = na.exclude)
# add name recognition and interaction
# mean center continuous predictors
glm.fit1 <- glm(nominee ~ scale(poll_avrg1, scale = FALSE) * scale(name_recognition1, scale = FALSE), data = primary_pollavrg_nr, family = binomial(link = "logit"), na.action = na.exclude)
# add political party contrast
# mean center continuous predictors
glm.fit2 <- glm(nominee ~ scale(poll_avrg1, scale = FALSE) * demVrep, data = primary_pollavrg_nr, family = binomial(link = "logit"), na.action = na.exclude)
# Create contrast for primary party
primary_pollavrg_nr$demVrep <- with(data = primary_pollavrg_nr, recode(primary_party, "Republican" = -0.5, "Democratic" = 0.5))
# polling averages only
# mean center continuous predictors
glm.fit0 <- glm(nominee ~ scale(poll_avrg1, scale = FALSE), data = primary_pollavrg_nr, family = binomial(link = "logit"), na.action = na.exclude)
# add name recognition and interaction
# mean center continuous predictors
glm.fit1 <- glm(nominee ~ scale(poll_avrg1, scale = FALSE) * scale(name_recognition1, scale = FALSE), data = primary_pollavrg_nr, family = binomial(link = "logit"), na.action = na.exclude)
# add political party contrast
# mean center continuous predictors
glm.fit2 <- glm(nominee ~ scale(poll_avrg1, scale = FALSE) * demVrep, data = primary_pollavrg_nr, family = binomial(link = "logit"), na.action = na.exclude)
roc(response = primary_pollavrg_nr$nominee, predictor = predict(glm.fit0, type = "response"), plot = TRUE, ci = TRUE, ci.method = "boot")
roc(response = primary_pollavrg_nr$nominee, predictor = predict(glm.fit0, type = "response"), plot = FALSE, ci = TRUE, ci.method = "boot")
roc(response = primary_pollavrg_nr$nominee, predictor = predict(glm.fit0, type = "response"), plot = FALSE, ci = TRUE, ci.method = "boot") %>% str()
fit.roc0 <- roc(response = primary_pollavrg_nr$nominee, predictor = predict(glm.fit0, type = "response"), plot = FALSE, ci = TRUE, ci.method = "boot")
fit.roc0$ci
fit.roc0$ci %>% str()
fit.roc0$auc
fit.roc0$ci
as.double(fit.roc0)
unlist(fit.roc0)
fit.roc0$ci
fit.roc0$ci %>% str()
fit.roc0$ci[1]
fit.roc0$ci[2]
fit.roc0$ci[3]
fit.roc0$auc
fit.roc0$ci
list(glm.fit0, glm.fit1, glm.fit2) %>%
map_df(function(fit) {
# fit roc
roc.fit <- roc(response = primary_pollavrg_nr$nominee, predictor = predict(fit, type = "response"), plot = FALSE, ci = TRUE, ci.method = "boot")
# return table
tibble(auc = roc.fit$auc,
lower = roc.fit$ci[1],
upper = roc.fit$ci[2])
})
list(glm.fit0, glm.fit1, glm.fit2) %>%
map_df(function(fit) {
# fit roc
roc.fit <- roc(response = primary_pollavrg_nr$nominee, predictor = predict(fit, type = "response"), plot = FALSE, ci = TRUE, ci.method = "boot")
# return table
tibble(auc = roc.fit$auc,
lower = roc.fit$ci[1],
upper = roc.fit$ci[2])
}) %>%
mutate(model = c("National Polling Average Only", "National Polling Average x Name Recognition", "National Polling Average x Major Political Party")) %>%
select(model, auc, lower, upper) %>%
set_names(c("Model Description", "Diagnostic Accuracy", "Lower Bound", "Upper Bound"))
list(glm.fit0, glm.fit1, glm.fit2) %>%
map_df(function(fit) {
# fit roc
roc.fit <- roc(response = primary_pollavrg_nr$nominee, predictor = predict(fit, type = "response"), plot = FALSE, ci = TRUE, ci.method = "boot")
# return table
tibble(auc = roc.fit$auc,
lower = roc.fit$ci[1],
upper = roc.fit$ci[2])
}) %>%
mutate(model = c("National Polling Average Only", "National Polling Average x Name Recognition", "National Polling Average x Major Political Party")) %>%
select(model, auc, lower, upper) %>%
set_names(c("Model Description", "Diagnostic Accuracy", "Lower Bound", "Upper Bound")) %>%
kable(format = "html", escape = FALSE, caption = "The table displays each models abilty 'diagnose' a candidate's nomination success. Diagnostic Accuracy is estimated from the Area Under the [Receiver Operating Characteristic Curve.](https://en.wikipedia.org/wiki/Receiver_operating_characteristic)") %>%
kable_styling("hover", full_width = F) %>%
column_spec(1:5, bold = TRUE)
list(glm.fit0, glm.fit1, glm.fit2) %>%
map_df(function(fit) {
# fit roc
roc.fit <- roc(response = primary_pollavrg_nr$nominee, predictor = predict(fit, type = "response"), plot = FALSE, ci = TRUE, ci.method = "boot")
# return table
tibble(auc = roc.fit$auc,
lower = roc.fit$ci[1],
upper = roc.fit$ci[2])
}) %>%
mutate(model = c("National Polling Average Only", "National Polling Average x Name Recognition", "National Polling Average x Major Political Party")) %>%
select(model, auc, lower, upper) %>%
set_names(c("Model Description", "Diagnostic Accuracy", "Lower Bound", "Upper Bound")) %>%
kable(format = "html", escape = FALSE, caption = "The table displays each models abilty 'diagnose' a candidate's nomination success. Diagnostic Accuracy is estimated from the Area Under the [Receiver Operating Characteristic Curve.](https://en.wikipedia.org/wiki/Receiver_operating_characteristic)") %>%
kable_styling("hover", full_width = F)
list(glm.fit0, glm.fit1, glm.fit2) %>%
map_df(function(fit) {
# fit roc
roc.fit <- roc(response = primary_pollavrg_nr$nominee, predictor = predict(fit, type = "response"), plot = FALSE, ci = TRUE, ci.method = "boot")
# return table
tibble(auc = roc.fit$auc,
lower = roc.fit$ci[1],
upper = roc.fit$ci[2]) %>%
mutate_if(is.numeric, round, 2)
}) %>%
mutate(model = c("National Polling Average Only", "National Polling Average x Name Recognition", "National Polling Average x Major Political Party")) %>%
select(model, auc, lower, upper) %>%
set_names(c("Model Description", "Diagnostic Accuracy", "Lower Bound", "Upper Bound")) %>%
kable(format = "html", escape = FALSE, caption = "The table displays each models abilty 'diagnose' a candidate's nomination success. Diagnostic Accuracy is estimated from the Area Under the [Receiver Operating Characteristic Curve.](https://en.wikipedia.org/wiki/Receiver_operating_characteristic)") %>%
kable_styling("hover", full_width = F)
blogdown:::serve_site()
primary_pollavrg_nr %>%
count(poll_avrg1_group, name_recognition1, nominee) %>%
group_by(poll_avrg1_group, name_recognition1) %>%
mutate(nominee = recode(nominee, "0" = "lost", "1" = "won")) %>%
spread(key = nominee, value = n) %>%
mutate(cell_size = sum(c(lost, won), na.rm = TRUE)) %>%
ungroup() %>%
mutate_if(is.numeric, function(x) ifelse(is.na(x), 0, x)) %>%
mutate(poll_avrg1_group = factor(poll_avrg1_group, levels = levels(poll_avrg1_group), labels = c("0-2%", "2-5%", "5-10%", "10-20%", "20-35%", "35%+")),
name_recognition1 = color_tile("white", "#0072b2")(name_recognition1),
cell_size = color_tile("white", "#009e73")(cell_size)) %>%
select(poll_avrg1_group, name_recognition1, cell_size, lost, won) %>%
arrange(desc(poll_avrg1_group), name_recognition1) %>%
set_names(c("Early Stage National Polling Average", "Name Recognition", "# of Candidates", "# Lost", "# Won")) %>%
kable(format = "html", escape = FALSE, caption = "Number of Candidates Who Won Their Party's Nomination Depending on Their Early Stage National Polling Average and Name Recognition") %>%
kable_styling("hover", full_width = FALSE)
blogdown:::serve_site()
options(knitr.kable.NA = "—")
primary_pollavrg_nr %>%
count(poll_avrg1_group, name_recognition1, nominee) %>%
group_by(poll_avrg1_group, name_recognition1) %>%
mutate(nominee = recode(nominee, "0" = "lost", "1" = "won")) %>%
spread(key = nominee, value = n) %>%
mutate(cell_size = sum(c(lost, won), na.rm = TRUE)) %>%
ungroup() %>%
mutate_if(is.numeric, function(x) ifelse(is.na(x), 0, x)) %>%
mutate(poll_avrg1_group = factor(poll_avrg1_group, levels = levels(poll_avrg1_group), labels = c("0-2%", "2-5%", "5-10%", "10-20%", "20-35%", "35%+")),
name_recognition1 = color_tile("white", "#0072b2")(name_recognition1),
cell_size = color_tile("white", "#009e73")(cell_size)) %>%
select(poll_avrg1_group, name_recognition1, cell_size, lost, won) %>%
arrange(desc(poll_avrg1_group), name_recognition1) %>%
set_names(c("Early Stage National Polling Average", "Name Recognition", "# of Candidates", "# Lost", "# Won")) %>%
kable(format = "html", escape = FALSE, caption = "Number of Candidates Who Won Their Party's Nomination Depending on Their Early Stage National Polling Average and Name Recognition") %>%
kable_styling("hover", full_width = FALSE)
blogdown:::serve_site()
list(glm.fit0, glm.fit1, glm.fit2) %>%
map_df(function(fit) {
# set random seed
set.seed(7940823)
# fit roc
roc.fit <- roc(response = primary_pollavrg_nr$nominee, predictor = predict(fit, type = "response"), plot = FALSE, ci = TRUE, ci.method = "boot")
# return table
tibble(auc = roc.fit$auc,
lower = roc.fit$ci[1],
upper = roc.fit$ci[2]) %>%
mutate_if(is.numeric, round, 2)
})
fit.roc0
fit.roc0$ci
fit.roc0$ci[2]
fit.roc0$ci[3]
blogdown:::serve_site()
# Install and/or load packages
# install.packages("tidyverse")
# install.packages("readxl")
# install.packages("scales")
# install.packages("knitr")
# install.packages("kableExtra")
# install.packages("formattable")
# install.packages("ggthemes")
# install.packages("ggrepel")
# install.packages("effects")
# install.packages("pROC")
library(tidyverse)
library(readxl)
library(scales)
library(knitr)
library(kableExtra)
library(formattable)
library(ggthemes)
library(ggrepel)
library(effects)
library(pROC)
# Read polling average and name recognition data
primary_pollavrg_nr <- read_xlsx(path = "data/president_primary_pollavrg_name_recognition.xlsx", sheet = "clean", na = "-9999")
# Read primary results data
presidential_primary_results <- paste0(rep(c("democratic", "republican"), times = length(seq(1972, 2016, 4))), rep(seq(1972, 2016, 4), each = 2)) %>%
map_df(function(primary_sheet) {
# read sheet
# restructure so each candidate gets a row
# add a primary party and primary year variable
read_xlsx(path = "data/presidential_primary_results.xlsx", sheet = primary_sheet, na = "-9999") %>%
gather(key = candidate_lastname, value = result, -c(Date, State, note, metric)) %>%
mutate(primary_sheet = primary_sheet,
primary_party = ifelse(str_detect(primary_sheet, pattern = "democratic"), "Democratic", "Republican"),
election_year = parse_number(primary_sheet),
incumbent_char = ifelse(str_detect(candidate_lastname, pattern = " incumbent"), "Incumbent",
ifelse(!is.na(candidate_lastname), "Not incumbent", NA)),
candidate_lastname = str_replace(candidate_lastname, pattern = " incumbent", replacement = ""),
candidate_lastname = ifelse(candidate_lastname == "Ronald Reagan Yes", "Reagan", candidate_lastname))
}) %>%
filter(primary_sheet != "republican1972" & metric == "count") %>%
rename(count = result) %>%
# vote count by election year, part, and candidate last name
group_by(election_year, primary_party, candidate_lastname) %>%
mutate(primary_votecount = sum(count, na.rm = TRUE)) %>%
# vote share by election year and party
group_by(election_year, primary_party) %>%
mutate(primary_voteshare = primary_votecount / sum(count, na.rm = TRUE)) %>%
ungroup()
# Create "High" and "Low" Name Recognition category
## First Half
primary_pollavrg_nr$well_known1_char <- with(primary_pollavrg_nr,
ifelse(name_recognition1 > 0.40, "Well known (> 40%)",
ifelse(name_recognition1 < 0.60, "Not well known (< 60%)", NA)))
## Second Half
primary_pollavrg_nr$well_known2_char <- with(primary_pollavrg_nr,
ifelse(name_recognition2 > 0.40, "Well known (> 40%)",
ifelse(name_recognition2 < 0.60, "Not well known (< 60%)", NA)))
# Create bins of polling averages
## First Half
primary_pollavrg_nr$poll_avrg1_group <- with(primary_pollavrg_nr, cut(poll_avrg1, breaks = c(-Inf, 0.02, 0.05, 0.10, 0.20, 0.35, Inf), include.lowest = FALSE))
## Second Half
primary_pollavrg_nr$poll_avrg2_group <- with(primary_pollavrg_nr, cut(poll_avrg2, breaks = c(-Inf, 0.02, 0.05, 0.10, 0.20, 0.35, Inf), include.lowest = FALSE))
# Candidate Last Name
primary_pollavrg_nr$candidate_lastname <- word(primary_pollavrg_nr$candidate, start = -1)
# Join polling average and primary results data
presidential_primary_results_pollavrg <- presidential_primary_results %>%
full_join(primary_pollavrg_nr, by = c("candidate_lastname", "primary_party", "election_year"))
# Create contrast for primary party
primary_pollavrg_nr$demVrep <- with(data = primary_pollavrg_nr, recode(primary_party, "Republican" = -0.5, "Democratic" = 0.5))
?duplicated
blogdown:::new_post_addin()
