dev.off()
# packages
# install.packages("tidyverse")
# install.packages("psych")
library(tidyverse)
library(psych)
# select from dplyr
select <- dplyr::select
# generate ggplot2 correlation matrix
ggcormat <- function(data, low = "#E41A1C", mid = "white", high = "#377EB8", value = "r") {
corr.test(data, use = "pairwise") %>%
.[[value]] %>%
as_tibble() %>%
mutate(x = factor(colnames(data), levels = colnames(data), ordered = TRUE)) %>%
gather(key = y, value = value, -x) %>%
mutate(y = factor(y, levels = colnames(data), ordered = TRUE)) %>%
filter(!is.na(value)) %>%
ggplot(mapping = aes(x = x, y = y, fill = value, label = round(value, 2))) +
geom_tile(color = "black") +
geom_text() +
scale_fill_gradient2(low = low, mid = mid, high = high) +
theme_bw() +
theme(legend.position = "top",
axis.title = element_blank())
}
# true covariance matrix (one general factor)
CV1 <- matrix(0.5, 10, 10)
diag(CV1) <- 1
R1 <- cov2cor(CV1)
# set random seed
set.seed(7777)
# data
x1 <- sim.correlation(R1, n = 1000, data = TRUE)
# correlation matrix
ggcormat(as_tibble(x1))
# save plot as image
ggsave(filename = "~/Google Drive/2018APA/plots/onefactor_cormat.jpeg", plot = last_plot(), units = "in", width = 5.5, height = 3.5)
# save jpeg of next plot
jpeg("~/Google Drive/2018APA/plots/onefactor_screeplot.jpeg", width = 11, height = 7, units = "in", res = 300, quality = 100)
# parallel analysis
fa.parallel(x1)
dev.off()
# omega hierarchical via EFA
omega(x1)
# true covariance matrix (2 factors)
CV2 <- matrix(0.5, 10, 10)
diag(CV2) <- 1
CV2[1:5, 6:10] <- 0
CV2[6:10, 1:5] <- 0
R2 <- cov2cor(CV2)
# data
x2 <- sim.correlation(R2, n = 1000, data = TRUE)
# correlation matrix
ggcormat(as_tibble(x2))
# save plot as image
ggsave(filename = "~/Google Drive/2018APA/plots/twofactor_cormat.jpeg", plot = last_plot(), units = "in", width = 5.5, height = 3.5)
# save jpeg of next plot
jpeg("~/Google Drive/2018APA/plots/twofactor_screeplot.jpeg", width = 11, height = 7, units = "in", res = 300, quality = 100)
# parallel analysis
fa.parallel(x2)
dev.off()
# omega hierarchical via EFA
omega(x2)
library(lme4)
sleepstudy
?sleepstudy
ggplot(sleepstudy, mapping = aes(x = Days, y = Reaction)) +
geom_point() +
geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(facets = ~ Subject) +
labs(x = "Days of Sleep Deprivation", y = "Average Reaction Time on Cognitive Tests")
# ggplot2 theme
my_theme <- theme_bw() +
theme(axis.title.x = element_text(size = 24, color = "black", family = "Gill Sans"),
axis.title.y = element_text(size = 24, color = "black", family = "Gill Sans"),
axis.text.x = element_text(size = 24, color = "black", family = "Gill Sans"),
axis.text.y = element_text(size = 24, color = "black", family = "Gill Sans"),
legend.title = element_text(size = 24, color = "black", family = "Gill Sans"),
legend.text = element_text(size = 24, color = "black", family = "Gill Sans"),
legend.position = "top")
ggplot(sleepstudy, mapping = aes(x = Days, y = Reaction)) +
geom_point() +
geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(facets = ~ Subject) +
labs(x = "Days of Sleep Deprivation", y = "Average Reaction Time on Cognitive Tests") +
my_theme
ggplot(sleepstudy, mapping = aes(x = Days, y = Reaction)) +
geom_point() +
geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(facets = ~ Subject) +
scale_x_continuous(breaks = seq(0, 10, 1)) _
ggplot(sleepstudy, mapping = aes(x = Days, y = Reaction)) +
geom_point() +
geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(facets = ~ Subject) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
labs(x = "Days of Sleep Deprivation", y = "Average Reaction Time on Cognitive Tests") +
my_theme
# ggplot2 theme
my_theme <- theme_bw() +
theme(axis.title.x = element_text(size = 20, color = "black", family = "Gill Sans"),
axis.title.y = element_text(size = 20, color = "black", family = "Gill Sans"),
axis.text.x = element_text(size = 20, color = "black", family = "Gill Sans"),
axis.text.y = element_text(size = 20, color = "black", family = "Gill Sans"),
legend.title = element_text(size = 20, color = "black", family = "Gill Sans"),
legend.text = element_text(size = 20, color = "black", family = "Gill Sans"),
legend.position = "top")
ggplot(sleepstudy, mapping = aes(x = Days, y = Reaction)) +
geom_point() +
geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(facets = ~ Subject) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
labs(x = "Days of Sleep Deprivation", y = "Average Reaction Time on Cognitive Tests") +
my_theme
sleepstudy
# ggplot2 theme
my_theme <- theme_bw() +
theme(axis.title.x = element_text(size = 18, color = "black", family = "Gill Sans"),
axis.title.y = element_text(size = 18, color = "black", family = "Gill Sans"),
axis.text.x = element_text(size = 18, color = "black", family = "Gill Sans"),
axis.text.y = element_text(size = 18, color = "black", family = "Gill Sans"),
legend.title = element_text(size = 18, color = "black", family = "Gill Sans"),
legend.text = element_text(size = 18, color = "black", family = "Gill Sans"),
legend.position = "top")
ggplot(sleepstudy, mapping = aes(x = Days, y = Reaction)) +
geom_point() +
geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(facets = ~ Subject) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
labs(x = "Days of Sleep Deprivation", y = "Average Reaction Time on Cognitive Tests") +
my_theme
ggplot(sleepstudy, mapping = aes(x = Days, y = Reaction)) +
geom_point() +
geom_smooth(method = "lm", color = "red", se = FALSE) +
facet_wrap(facets = ~ Subject) +
scale_x_continuous(breaks = seq(0, 10, 1)) +
labs(x = "Days of Sleep Deprivation", y = "Average Reaction Time on Cognitive Tests") +
my_theme
# save plot
ggsave(filename = "~/Google Drive/2018APA/plots/lmm_slopes.jpeg", plot = last_plot(), units = "in", width = 11, height = 7)
# packages
# install.packages("tidyverse")
# install.packages("psych")
library(tidyverse)
library(psych)
# select from dplyr
select <- dplyr::select
# generate ggplot2 correlation matrix
ggcormat <- function(data, low = "#E41A1C", mid = "white", high = "#377EB8", value = "r") {
corr.test(data, use = "pairwise") %>%
.[[value]] %>%
as_tibble() %>%
mutate(x = factor(colnames(data), levels = colnames(data), ordered = TRUE)) %>%
gather(key = y, value = value, -x) %>%
mutate(y = factor(y, levels = colnames(data), ordered = TRUE)) %>%
filter(!is.na(value)) %>%
ggplot(mapping = aes(x = x, y = y, fill = value, label = round(value, 2))) +
geom_tile(color = "black") +
geom_text() +
scale_fill_gradient2(low = low, mid = mid, high = high) +
theme_bw() +
theme(legend.position = "top",
axis.title = element_blank())
}
# true covariance matrix (one general factor)
CV1 <- matrix(0.5, 10, 10)
diag(CV1) <- 1
R1 <- cov2cor(CV1)
# set random seed
set.seed(7777)
# data
x1 <- sim.correlation(R1, n = 1000, data = TRUE)
# correlation matrix
ggcormat(as_tibble(x1))
# save plot as image
ggsave(filename = "~/Google Drive/2018APA/plots/onefactor_cormat.jpeg", plot = last_plot(), units = "in", width = 5.5, height = 3.5)
# save jpeg of next plot
jpeg("~/Google Drive/2018APA/plots/onefactor_screeplot.jpeg", width = 11, height = 7, units = "in", res = 300, quality = 100)
# parallel analysis
fa.parallel(x1)
dev.off()
# parallel analysis
fa.parallel(x1)
# packages
# install.packages("tidyverse")
# install.packages("MASS")
# install.packages("lme4")
# install.packages("lmerTest")
# install.packages("lattice")
library(tidyverse)
library(MASS)
library(lme4)
library(lmerTest)
library(lattice)
# set random seed
set.seed(7777)
# true covariance matrix: "clean"
S1 <- matrix(0.50, 6, 6)
diag(S1) <- 1
# true covariance matrix: "messy"
S2 <- matrix(0.50, 6, 6)
diag(S2) <- c(1, 1, 1, 2, 6, 10)
# true size and means
means <- rep(0, 6)
size <- 200
# data
data1 <- mvrnorm(n = size, mu = means, Sigma = S) %>%
as_tibble() %>%
mutate(subject = 1:size) %>%
gather(key = target, value = y, -subject) %>%
mutate(target = parse_number(target))
# packages
# install.packages("tidyverse")
# install.packages("MASS")
# install.packages("lme4")
# install.packages("lmerTest")
# install.packages("lattice")
library(tidyverse)
library(MASS)
library(lme4)
library(lmerTest)
library(lattice)
# set random seed
set.seed(7777)
# true covariance matrix: "clean"
S1 <- matrix(0.50, 6, 6)
diag(S1) <- 1
# true covariance matrix: "messy"
S2 <- matrix(0.50, 6, 6)
diag(S2) <- c(1, 1, 1, 2, 6, 10)
# true size and means
means <- rep(0, 6)
size <- 200
# data
data1 <- mvrnorm(n = size, mu = means, Sigma = S1) %>%
as_tibble() %>%
mutate(subject = 1:size) %>%
gather(key = target, value = y, -subject) %>%
mutate(target = parse_number(target))
modmat <- factor(data1$target)
contrasts(modmat) <- cbind(condition = c(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5))
modmat
contrasts(modmat)
# packages
# install.packages("tidyverse")
# install.packages("MASS")
# install.packages("lme4")
# install.packages("lmerTest")
# install.packages("lattice")
library(tidyverse)
library(MASS)
library(lme4)
library(lmerTest)
library(lattice)
# set random seed
set.seed(7777)
# true covariance matrix: "clean"
S1 <- matrix(0.50, 6, 6)
diag(S1) <- 1
# true covariance matrix: "messy"
S2 <- matrix(0.50, 6, 6)
diag(S2) <- c(1, 1, 1, 2, 6, 10)
# true size and means
means <- rep(0, 6)
size <- 200
# data
data1 <- mvrnorm(n = size, mu = means, Sigma = S1) %>%
as_tibble() %>%
mutate(subject = 1:size) %>%
gather(key = target, value = y, -subject) %>%
mutate(target = parse_number(target))
modmat <- factor(data1$target)
contrasts(modmat) <- cbind(condition = c(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5))
model.matrix(lm(data1$y ~ modmat))
str(contrasts(modmat))
str(contrasts(modmat))[, -1]
model.matrix(lm(data1$y ~ modmat))[, -1]
data1[, c("condition", paste0("contrast", 1:4))] <- model.matrix(lm(data1$y ~ modmat))[, -1]
View(data1)
model.matrix(lm(y ~ factor(target), data = data1, contrasts = list(condition = c(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5))))
model.matrix(lm(y ~ factor(target), data = data1, contrasts = list(factor(target) = c(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5))))
model.matrix(lm(y ~ factor(target), data = data1, contrasts = list(target = c(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5))))
# packages
# install.packages("tidyverse")
# install.packages("MASS")
# install.packages("lme4")
# install.packages("lmerTest")
# install.packages("lattice")
library(tidyverse)
library(MASS)
library(lme4)
library(lmerTest)
library(lattice)
# set random seed
set.seed(7777)
# true covariance matrix: "clean"
S1 <- matrix(0.50, 6, 6)
diag(S1) <- 1
# true covariance matrix: "messy"
S2 <- matrix(0.50, 6, 6)
diag(S2) <- c(1, 1, 1, 2, 6, 10)
# true size and means
means <- rep(0, 6)
size <- 200
# data
data1 <- mvrnorm(n = size, mu = means, Sigma = S1) %>%
as_tibble() %>%
mutate(subject = 1:size) %>%
gather(key = target, value = y, -subject) %>%
mutate(target = factor(parse_number(target)))
modmat <- factor(data1$target)
contrasts(modmat) <- cbind(condition = c(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5))
model.matrix(lm(y ~ target, data = data1, contrasts = list(target = c(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5))))
# packages
# install.packages("tidyverse")
# install.packages("MASS")
# install.packages("lme4")
# install.packages("lmerTest")
# install.packages("lattice")
library(tidyverse)
library(MASS)
library(lme4)
library(lmerTest)
library(lattice)
# set random seed
set.seed(7777)
# true covariance matrix: "clean"
S1 <- matrix(0.50, 6, 6)
diag(S1) <- 1
# true covariance matrix: "messy"
S2 <- matrix(0.50, 6, 6)
diag(S2) <- c(1, 1, 1, 2, 6, 10)
# true size and means
means <- rep(0, 6)
size <- 200
# data
data1 <- mvrnorm(n = size, mu = means, Sigma = S1) %>%
as_tibble() %>%
mutate(subject = 1:size) %>%
gather(key = target, value = y, -subject) %>%
mutate(target = factor(parse_number(target)))
modmat <- factor(data1$target)
contrasts(modmat) <- cbind(condition = c(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5))
data1[, c("condition", paste0("contrast", 1:4))] <- model.matrix(lm(y ~ target, data = data1, contrasts = list(target = c(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5))))[, -1]
View(data1)
rm(modmat)
# packages
# install.packages("tidyverse")
# install.packages("MASS")
# install.packages("lme4")
# install.packages("lmerTest")
# install.packages("lattice")
library(tidyverse)
library(MASS)
library(lme4)
library(lmerTest)
library(lattice)
# set random seed
set.seed(7777)
# true covariance matrix: "clean"
S1 <- matrix(0.50, 6, 6)
diag(S1) <- 1
# true covariance matrix: "messy"
S2 <- matrix(0.50, 6, 6)
diag(S2) <- c(1, 1, 1, 2, 6, 10)
# true size and means
means <- rep(0, 6)
size <- 200
# data
data1 <- mvrnorm(n = size, mu = means, Sigma = S1) %>%
as_tibble() %>%
mutate(subject = 1:size) %>%
gather(key = target, value = y, -subject) %>%
mutate(target = factor(parse_number(target)))
# add contrast columns
data1[, c("condition", paste0("contrast", 1:4))] <- model.matrix(lm(y ~ target, data = data1, contrasts = list(target = c(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5))))[, -1]
# fit model
lmer1 <- lmer(y ~ condition + contrast1 + contrast2 + contrast3 + contrast4 + (1 + condition + contrast1 + contrast2 + contrast3 + contrast4 | subject), data = data1, REML = TRUE)
# fit model
lmer1 <- lmer(y ~ condition + contrast1 + contrast2 + contrast3 + contrast4 + (1 + condition + contrast1 + contrast2 + contrast3 + contrast4 | subject), data = data1, REML = TRUE, control = lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.nRE = "ignore"))
# results
summary(lmer1)
spread(data1, key = target, value = y, -everything())
cat(colnames(data1), sep = ", ")
spread(data1, key = target, value = y, -c(condition, contrast1, contrast2, contrast3, contrast4))
# select from dplyr
select <- dplyr::select
spread(data1, key = target, value = y, -c(condition, contrast1, contrast2, contrast3, contrast4))
spread(data1, key = target, value = y, -c("condition", "contrast1", "contrast2", "contrast3", "contrast4"))
spread(data1, key = target, value = y, -condition, -contrast1, -contrast2, -contrast3, -contrast4))
data1 %>%
select(0condition, -contrast1, -contrast2, -contrast3, -contrast4) %>%
spread(key = target, value = y))
data1 %>%
select(condition, -contrast1, -contrast2, -contrast3, -contrast4) %>%
spread(key = target, value = y))
data1 %>%
select(condition, -contrast1, -contrast2, -contrast3, -contrast4) %>%
spread(key = target, value = y))
data1 %>%
select(-condition, -contrast1, -contrast2, -contrast3, -contrast4) %>%
spread(key = target, value = y))
data1
data1 %>%
select(-condition, -contrast1, -contrast2, -contrast3, -contrast4) %>%
spread(key = target, value = y, -subject))
data1 %>%
select(-condition, -contrast1, -contrast2, -contrast3, -contrast4)
data1 %>%
select(-condition, -contrast1, -contrast2, -contrast3, -contrast4) %>%
spread(key = target, value = y)
wdata1 <- data1 %>%
select(-condition, -contrast1, -contrast2, -contrast3, -contrast4) %>%
spread(key = target, value = y)
t.test(as.matrix(wdata1[, -1]) %*% c(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5))
# results
summary(lmer1)
data2 <- tibble(x = rep(1:4, each = 25),
y = rnorm(n = rep(25, 4)[x], mean = 1:4[x], sd = rep(1, 4)[x]))
x <- rep(1:4, each = 4)
y <- rnorm(n = rep(24, 4)[x], mean = 1:4[x], sd = rep(1, 4)[x])
y <- rnorm(n = rep(24, 4)[x], mean = (1:4)[x], sd = rep(1, 4)[x])
data2 <- tibble(x = rep(1:4, each = 25),
y = rnorm(n = rep(25, 4)[x], mean = (1:4)[x], sd = rep(1, 4)[x]))
with(data1, by(y, x, mean))
with(data2, by(y, x, mean))
rm(x, y)
# new data
data2 <- tibble(x = rep(1:4, each = 25),
y = rnorm(n = rep(25, 4)[x], mean = (1:4)[x], sd = rep(1, 4)[x]))
data2[, c("main1", "main2", "interaction")] <- lm(y ~ x, data = data2, contrasts = list(x = cbind(c(-1, -1, 1, 1), c(-1, 1, -1, 1), c(1, -1, -1, 1))))
lm(y ~ x, data = data2, contrasts = list(x = cbind(c(-1, -1, 1, 1), c(-1, 1, -1, 1), c(1, -1, -1, 1))))
# new data
data2 <- tibble(x = rep(1:4, each = 25),
y = rnorm(n = rep(25, 4)[x], mean = (1:4)[x], sd = rep(1, 4)[x]),
x = factor(x))
lm(y ~ x, data = data2, contrasts = list(x = cbind(c(-1, -1, 1, 1), c(-1, 1, -1, 1), c(1, -1, -1, 1))))
# new data
data2 <- tibble(x = rep(1:4, each = 25),
y = rnorm(n = rep(25, 4)[x], mean = (1:4)[x], sd = rep(1, 4)[x]),
x = factor(x))
# new data
data2 <- tibble(x = rep(1:4, each = 25),
y = rnorm(n = rep(25, 4)[x], mean = (1:4)[x], sd = rep(1, 4)[x]),
x = factor(x))
tibble(x = rep(1:4, each = 25),
y = rnorm(n = rep(25, 4)[x], mean = (1:4)[x], sd = rep(1, 4)[x]))
# new data
data2 <- tibble(x = rep(1:4, each = 25),
y = rnorm(n = rep(25, 4)[x], mean = (1:4)[x], sd = rep(1, 4)[x]),
x = as.factor(x))
# new data
data2 <- tibble(x = rep(1:4, each = 25),
y = rnorm(n = rep(25, 4)[x], mean = (1:4)[x], sd = rep(1, 4)[x]))
data2 <- tibble(x = rep(1:4, each = 25),
y = rnorm(n = rep(25, 4)[x], mean = (1:4)[x], sd = rep(1, 4)[x]))
data2$x <- factor(data2$x)
lm(y ~ x, data = data2, contrasts = list(x = cbind(c(-1, -1, 1, 1), c(-1, 1, -1, 1), c(1, -1, -1, 1))))
data2[, c("main1", "main2", "interaction")] <- model.matrix(lm(y ~ x, data = data2, contrasts = list(x = cbind(c(-1, -1, 1, 1), c(-1, 1, -1, 1), c(1, -1, -1, 1)))))[, -1]
View(data2)
data2 %>% count(x, main1, main2, interaction)
# new data
data2 <- tibble(x = rep(1:4, each = 25),
y = rnorm(n = rep(25, 4)[x], mean = (1:4)[x], sd = rep(1, 4)[x]))
# packages
# install.packages("tidyverse")
# install.packages("MASS")
# install.packages("lme4")
# install.packages("lmerTest")
# install.packages("lattice")
library(tidyverse)
library(MASS)
library(lme4)
library(lmerTest)
library(lattice)
# select from dplyr
select <- dplyr::select
# set random seed
set.seed(7777)
# true covariance matrix: "clean"
S1 <- matrix(0.50, 6, 6)
diag(S1) <- 1
# true covariance matrix: "messy"
S2 <- matrix(0.50, 6, 6)
diag(S2) <- c(1, 1, 1, 2, 6, 10)
# true size and means
means <- rep(0, 6)
size <- 200
# data
data1 <- mvrnorm(n = size, mu = means, Sigma = S1) %>%
as_tibble() %>%
mutate(subject = 1:size) %>%
gather(key = target, value = y, -subject) %>%
mutate(target = factor(parse_number(target)))
# add contrast columns
data1[, c("condition", paste0("contrast", 1:4))] <- model.matrix(lm(y ~ target, data = data1, contrasts = list(target = c(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5))))[, -1]
# fit model
lmer1 <- lmer(y ~ condition + contrast1 + contrast2 + contrast3 + contrast4 + (1 + condition + contrast1 + contrast2 + contrast3 + contrast4 | subject), data = data1, REML = TRUE, control = lmerControl(check.nobs.vs.nlev = "ignore", check.nobs.vs.nRE = "ignore"))
# results
summary(lmer1)
# check against multivariate approach
wdata1 <- data1 %>%
select(-condition, -contrast1, -contrast2, -contrast3, -contrast4) %>%
spread(key = target, value = y)
# t-test
t.test(as.matrix(wdata1[, -1]) %*% c(-0.5, -0.5, -0.5, 0.5, 0.5, 0.5))
# new data
data2 <- tibble(x = rep(1:4, each = 25),
y = rnorm(n = rep(25, 4)[x], mean = (1:4)[x], sd = rep(1, 4)[x]))
data2[, c("main1", "main2", "interaction")] <- model.matrix(lm(y ~ factor(x), data = data2, contrasts = list(`factor(x)` = cbind(c(-1, -1, 1, 1), c(-1, 1, -1, 1), c(1, -1, -1, 1)))))[, -1]
View(data2)
data2 %>% count(x, main1, main2, interaction)
